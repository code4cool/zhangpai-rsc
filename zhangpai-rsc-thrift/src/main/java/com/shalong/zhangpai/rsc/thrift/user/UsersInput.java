/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shalong.zhangpai.rsc.thrift.user;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class UsersInput implements org.apache.thrift.TBase<UsersInput, UsersInput._Fields>, java.io.Serializable, Cloneable, Comparable<UsersInput> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UsersInput");

  private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("Pagesize", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("userInput", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UsersInputStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UsersInputTupleSchemeFactory());
  }

  public int Pagesize; // required
  public int pageIndex; // required
  public UserInput userInput; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGESIZE((short)1, "Pagesize"),
    PAGE_INDEX((short)2, "pageIndex"),
    USER_INPUT((short)3, "userInput");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGESIZE
          return PAGESIZE;
        case 2: // PAGE_INDEX
          return PAGE_INDEX;
        case 3: // USER_INPUT
          return USER_INPUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGESIZE_ISSET_ID = 0;
  private static final int __PAGEINDEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("Pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_INPUT, new org.apache.thrift.meta_data.FieldMetaData("userInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInput.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UsersInput.class, metaDataMap);
  }

  public UsersInput() {
  }

  public UsersInput(
    int Pagesize,
    int pageIndex,
    UserInput userInput)
  {
    this();
    this.Pagesize = Pagesize;
    setPagesizeIsSet(true);
    this.pageIndex = pageIndex;
    setPageIndexIsSet(true);
    this.userInput = userInput;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UsersInput(UsersInput other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Pagesize = other.Pagesize;
    this.pageIndex = other.pageIndex;
    if (other.isSetUserInput()) {
      this.userInput = new UserInput(other.userInput);
    }
  }

  public UsersInput deepCopy() {
    return new UsersInput(this);
  }

  @Override
  public void clear() {
    setPagesizeIsSet(false);
    this.Pagesize = 0;
    setPageIndexIsSet(false);
    this.pageIndex = 0;
    this.userInput = null;
  }

  public int getPagesize() {
    return this.Pagesize;
  }

  public UsersInput setPagesize(int Pagesize) {
    this.Pagesize = Pagesize;
    setPagesizeIsSet(true);
    return this;
  }

  public void unsetPagesize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field Pagesize is set (has been assigned a value) and false otherwise */
  public boolean isSetPagesize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPagesizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getPageIndex() {
    return this.pageIndex;
  }

  public UsersInput setPageIndex(int pageIndex) {
    this.pageIndex = pageIndex;
    setPageIndexIsSet(true);
    return this;
  }

  public void unsetPageIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetPageIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  public void setPageIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
  }

  public UserInput getUserInput() {
    return this.userInput;
  }

  public UsersInput setUserInput(UserInput userInput) {
    this.userInput = userInput;
    return this;
  }

  public void unsetUserInput() {
    this.userInput = null;
  }

  /** Returns true if field userInput is set (has been assigned a value) and false otherwise */
  public boolean isSetUserInput() {
    return this.userInput != null;
  }

  public void setUserInputIsSet(boolean value) {
    if (!value) {
      this.userInput = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGESIZE:
      if (value == null) {
        unsetPagesize();
      } else {
        setPagesize((Integer)value);
      }
      break;

    case PAGE_INDEX:
      if (value == null) {
        unsetPageIndex();
      } else {
        setPageIndex((Integer)value);
      }
      break;

    case USER_INPUT:
      if (value == null) {
        unsetUserInput();
      } else {
        setUserInput((UserInput)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGESIZE:
      return Integer.valueOf(getPagesize());

    case PAGE_INDEX:
      return Integer.valueOf(getPageIndex());

    case USER_INPUT:
      return getUserInput();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGESIZE:
      return isSetPagesize();
    case PAGE_INDEX:
      return isSetPageIndex();
    case USER_INPUT:
      return isSetUserInput();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UsersInput)
      return this.equals((UsersInput)that);
    return false;
  }

  public boolean equals(UsersInput that) {
    if (that == null)
      return false;

    boolean this_present_Pagesize = true;
    boolean that_present_Pagesize = true;
    if (this_present_Pagesize || that_present_Pagesize) {
      if (!(this_present_Pagesize && that_present_Pagesize))
        return false;
      if (this.Pagesize != that.Pagesize)
        return false;
    }

    boolean this_present_pageIndex = true;
    boolean that_present_pageIndex = true;
    if (this_present_pageIndex || that_present_pageIndex) {
      if (!(this_present_pageIndex && that_present_pageIndex))
        return false;
      if (this.pageIndex != that.pageIndex)
        return false;
    }

    boolean this_present_userInput = true && this.isSetUserInput();
    boolean that_present_userInput = true && that.isSetUserInput();
    if (this_present_userInput || that_present_userInput) {
      if (!(this_present_userInput && that_present_userInput))
        return false;
      if (!this.userInput.equals(that.userInput))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UsersInput other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(other.isSetPagesize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagesize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Pagesize, other.Pagesize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserInput()).compareTo(other.isSetUserInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInput, other.userInput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UsersInput(");
    boolean first = true;

    sb.append("Pagesize:");
    sb.append(this.Pagesize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageIndex:");
    sb.append(this.pageIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userInput:");
    if (this.userInput == null) {
      sb.append("null");
    } else {
      sb.append(this.userInput);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userInput != null) {
      userInput.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UsersInputStandardSchemeFactory implements SchemeFactory {
    public UsersInputStandardScheme getScheme() {
      return new UsersInputStandardScheme();
    }
  }

  private static class UsersInputStandardScheme extends StandardScheme<UsersInput> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UsersInput struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGESIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Pagesize = iprot.readI32();
              struct.setPagesizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageIndex = iprot.readI32();
              struct.setPageIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userInput = new UserInput();
              struct.userInput.read(iprot);
              struct.setUserInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UsersInput struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
      oprot.writeI32(struct.Pagesize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
      oprot.writeI32(struct.pageIndex);
      oprot.writeFieldEnd();
      if (struct.userInput != null) {
        oprot.writeFieldBegin(USER_INPUT_FIELD_DESC);
        struct.userInput.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UsersInputTupleSchemeFactory implements SchemeFactory {
    public UsersInputTupleScheme getScheme() {
      return new UsersInputTupleScheme();
    }
  }

  private static class UsersInputTupleScheme extends TupleScheme<UsersInput> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UsersInput struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPagesize()) {
        optionals.set(0);
      }
      if (struct.isSetPageIndex()) {
        optionals.set(1);
      }
      if (struct.isSetUserInput()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPagesize()) {
        oprot.writeI32(struct.Pagesize);
      }
      if (struct.isSetPageIndex()) {
        oprot.writeI32(struct.pageIndex);
      }
      if (struct.isSetUserInput()) {
        struct.userInput.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UsersInput struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.Pagesize = iprot.readI32();
        struct.setPagesizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageIndex = iprot.readI32();
        struct.setPageIndexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userInput = new UserInput();
        struct.userInput.read(iprot);
        struct.setUserInputIsSet(true);
      }
    }
  }

}

