/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shalong.zhangpai.rsc.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServiceMainInput implements org.apache.thrift.TBase<ServiceMainInput, ServiceMainInput._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceMainInput> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceMainInput");

  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SECRET_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("secretArgs", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField JSON_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonArgs", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceMainInputStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceMainInputTupleSchemeFactory());
  }

  public String serviceName; // required
  public String methodName; // required
  public String secretArgs; // required
  public String jsonArgs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_NAME((short)1, "serviceName"),
    METHOD_NAME((short)2, "methodName"),
    SECRET_ARGS((short)3, "secretArgs"),
    JSON_ARGS((short)4, "jsonArgs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_NAME
          return SERVICE_NAME;
        case 2: // METHOD_NAME
          return METHOD_NAME;
        case 3: // SECRET_ARGS
          return SECRET_ARGS;
        case 4: // JSON_ARGS
          return JSON_ARGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRET_ARGS, new org.apache.thrift.meta_data.FieldMetaData("secretArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JSON_ARGS, new org.apache.thrift.meta_data.FieldMetaData("jsonArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceMainInput.class, metaDataMap);
  }

  public ServiceMainInput() {
  }

  public ServiceMainInput(
    String serviceName,
    String methodName,
    String secretArgs,
    String jsonArgs)
  {
    this();
    this.serviceName = serviceName;
    this.methodName = methodName;
    this.secretArgs = secretArgs;
    this.jsonArgs = jsonArgs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceMainInput(ServiceMainInput other) {
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    if (other.isSetSecretArgs()) {
      this.secretArgs = other.secretArgs;
    }
    if (other.isSetJsonArgs()) {
      this.jsonArgs = other.jsonArgs;
    }
  }

  public ServiceMainInput deepCopy() {
    return new ServiceMainInput(this);
  }

  @Override
  public void clear() {
    this.serviceName = null;
    this.methodName = null;
    this.secretArgs = null;
    this.jsonArgs = null;
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public ServiceMainInput setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public String getMethodName() {
    return this.methodName;
  }

  public ServiceMainInput setMethodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  public String getSecretArgs() {
    return this.secretArgs;
  }

  public ServiceMainInput setSecretArgs(String secretArgs) {
    this.secretArgs = secretArgs;
    return this;
  }

  public void unsetSecretArgs() {
    this.secretArgs = null;
  }

  /** Returns true if field secretArgs is set (has been assigned a value) and false otherwise */
  public boolean isSetSecretArgs() {
    return this.secretArgs != null;
  }

  public void setSecretArgsIsSet(boolean value) {
    if (!value) {
      this.secretArgs = null;
    }
  }

  public String getJsonArgs() {
    return this.jsonArgs;
  }

  public ServiceMainInput setJsonArgs(String jsonArgs) {
    this.jsonArgs = jsonArgs;
    return this;
  }

  public void unsetJsonArgs() {
    this.jsonArgs = null;
  }

  /** Returns true if field jsonArgs is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonArgs() {
    return this.jsonArgs != null;
  }

  public void setJsonArgsIsSet(boolean value) {
    if (!value) {
      this.jsonArgs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((String)value);
      }
      break;

    case SECRET_ARGS:
      if (value == null) {
        unsetSecretArgs();
      } else {
        setSecretArgs((String)value);
      }
      break;

    case JSON_ARGS:
      if (value == null) {
        unsetJsonArgs();
      } else {
        setJsonArgs((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_NAME:
      return getServiceName();

    case METHOD_NAME:
      return getMethodName();

    case SECRET_ARGS:
      return getSecretArgs();

    case JSON_ARGS:
      return getJsonArgs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_NAME:
      return isSetServiceName();
    case METHOD_NAME:
      return isSetMethodName();
    case SECRET_ARGS:
      return isSetSecretArgs();
    case JSON_ARGS:
      return isSetJsonArgs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceMainInput)
      return this.equals((ServiceMainInput)that);
    return false;
  }

  public boolean equals(ServiceMainInput that) {
    if (that == null)
      return false;

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_secretArgs = true && this.isSetSecretArgs();
    boolean that_present_secretArgs = true && that.isSetSecretArgs();
    if (this_present_secretArgs || that_present_secretArgs) {
      if (!(this_present_secretArgs && that_present_secretArgs))
        return false;
      if (!this.secretArgs.equals(that.secretArgs))
        return false;
    }

    boolean this_present_jsonArgs = true && this.isSetJsonArgs();
    boolean that_present_jsonArgs = true && that.isSetJsonArgs();
    if (this_present_jsonArgs || that_present_jsonArgs) {
      if (!(this_present_jsonArgs && that_present_jsonArgs))
        return false;
      if (!this.jsonArgs.equals(that.jsonArgs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ServiceMainInput other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, other.methodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecretArgs()).compareTo(other.isSetSecretArgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecretArgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretArgs, other.secretArgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJsonArgs()).compareTo(other.isSetJsonArgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonArgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonArgs, other.jsonArgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceMainInput(");
    boolean first = true;

    sb.append("serviceName:");
    if (this.serviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodName:");
    if (this.methodName == null) {
      sb.append("null");
    } else {
      sb.append(this.methodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secretArgs:");
    if (this.secretArgs == null) {
      sb.append("null");
    } else {
      sb.append(this.secretArgs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jsonArgs:");
    if (this.jsonArgs == null) {
      sb.append("null");
    } else {
      sb.append(this.jsonArgs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceMainInputStandardSchemeFactory implements SchemeFactory {
    public ServiceMainInputStandardScheme getScheme() {
      return new ServiceMainInputStandardScheme();
    }
  }

  private static class ServiceMainInputStandardScheme extends StandardScheme<ServiceMainInput> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceMainInput struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.methodName = iprot.readString();
              struct.setMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECRET_ARGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secretArgs = iprot.readString();
              struct.setSecretArgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JSON_ARGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsonArgs = iprot.readString();
              struct.setJsonArgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceMainInput struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceName != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.serviceName);
        oprot.writeFieldEnd();
      }
      if (struct.methodName != null) {
        oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
        oprot.writeString(struct.methodName);
        oprot.writeFieldEnd();
      }
      if (struct.secretArgs != null) {
        oprot.writeFieldBegin(SECRET_ARGS_FIELD_DESC);
        oprot.writeString(struct.secretArgs);
        oprot.writeFieldEnd();
      }
      if (struct.jsonArgs != null) {
        oprot.writeFieldBegin(JSON_ARGS_FIELD_DESC);
        oprot.writeString(struct.jsonArgs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceMainInputTupleSchemeFactory implements SchemeFactory {
    public ServiceMainInputTupleScheme getScheme() {
      return new ServiceMainInputTupleScheme();
    }
  }

  private static class ServiceMainInputTupleScheme extends TupleScheme<ServiceMainInput> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceMainInput struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetServiceName()) {
        optionals.set(0);
      }
      if (struct.isSetMethodName()) {
        optionals.set(1);
      }
      if (struct.isSetSecretArgs()) {
        optionals.set(2);
      }
      if (struct.isSetJsonArgs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetMethodName()) {
        oprot.writeString(struct.methodName);
      }
      if (struct.isSetSecretArgs()) {
        oprot.writeString(struct.secretArgs);
      }
      if (struct.isSetJsonArgs()) {
        oprot.writeString(struct.jsonArgs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceMainInput struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.methodName = iprot.readString();
        struct.setMethodNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.secretArgs = iprot.readString();
        struct.setSecretArgsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jsonArgs = iprot.readString();
        struct.setJsonArgsIsSet(true);
      }
    }
  }

}

