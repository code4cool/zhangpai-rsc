/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shalong.zhangpai.rsc.thrift.user;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class UsersOutput implements org.apache.thrift.TBase<UsersOutput, UsersOutput._Fields>, java.io.Serializable, Cloneable, Comparable<UsersOutput> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UsersOutput");

  private static final org.apache.thrift.protocol.TField SUM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sumCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RETURN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnCode", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UsersOutputStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UsersOutputTupleSchemeFactory());
  }

  public int sumCount; // required
  public List<UserOutput> userList; // required
  public int returnCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUM_COUNT((short)1, "sumCount"),
    USER_LIST((short)2, "userList"),
    RETURN_CODE((short)3, "returnCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUM_COUNT
          return SUM_COUNT;
        case 2: // USER_LIST
          return USER_LIST;
        case 3: // RETURN_CODE
          return RETURN_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUMCOUNT_ISSET_ID = 0;
  private static final int __RETURNCODE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUM_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sumCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_LIST, new org.apache.thrift.meta_data.FieldMetaData("userList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserOutput.class))));
    tmpMap.put(_Fields.RETURN_CODE, new org.apache.thrift.meta_data.FieldMetaData("returnCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UsersOutput.class, metaDataMap);
  }

  public UsersOutput() {
  }

  public UsersOutput(
    int sumCount,
    List<UserOutput> userList,
    int returnCode)
  {
    this();
    this.sumCount = sumCount;
    setSumCountIsSet(true);
    this.userList = userList;
    this.returnCode = returnCode;
    setReturnCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UsersOutput(UsersOutput other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sumCount = other.sumCount;
    if (other.isSetUserList()) {
      List<UserOutput> __this__userList = new ArrayList<UserOutput>(other.userList.size());
      for (UserOutput other_element : other.userList) {
        __this__userList.add(new UserOutput(other_element));
      }
      this.userList = __this__userList;
    }
    this.returnCode = other.returnCode;
  }

  public UsersOutput deepCopy() {
    return new UsersOutput(this);
  }

  @Override
  public void clear() {
    setSumCountIsSet(false);
    this.sumCount = 0;
    this.userList = null;
    setReturnCodeIsSet(false);
    this.returnCode = 0;
  }

  public int getSumCount() {
    return this.sumCount;
  }

  public UsersOutput setSumCount(int sumCount) {
    this.sumCount = sumCount;
    setSumCountIsSet(true);
    return this;
  }

  public void unsetSumCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUMCOUNT_ISSET_ID);
  }

  /** Returns true if field sumCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSumCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SUMCOUNT_ISSET_ID);
  }

  public void setSumCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUMCOUNT_ISSET_ID, value);
  }

  public int getUserListSize() {
    return (this.userList == null) ? 0 : this.userList.size();
  }

  public java.util.Iterator<UserOutput> getUserListIterator() {
    return (this.userList == null) ? null : this.userList.iterator();
  }

  public void addToUserList(UserOutput elem) {
    if (this.userList == null) {
      this.userList = new ArrayList<UserOutput>();
    }
    this.userList.add(elem);
  }

  public List<UserOutput> getUserList() {
    return this.userList;
  }

  public UsersOutput setUserList(List<UserOutput> userList) {
    this.userList = userList;
    return this;
  }

  public void unsetUserList() {
    this.userList = null;
  }

  /** Returns true if field userList is set (has been assigned a value) and false otherwise */
  public boolean isSetUserList() {
    return this.userList != null;
  }

  public void setUserListIsSet(boolean value) {
    if (!value) {
      this.userList = null;
    }
  }

  public int getReturnCode() {
    return this.returnCode;
  }

  public UsersOutput setReturnCode(int returnCode) {
    this.returnCode = returnCode;
    setReturnCodeIsSet(true);
    return this;
  }

  public void unsetReturnCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNCODE_ISSET_ID);
  }

  /** Returns true if field returnCode is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnCode() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNCODE_ISSET_ID);
  }

  public void setReturnCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNCODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUM_COUNT:
      if (value == null) {
        unsetSumCount();
      } else {
        setSumCount((Integer)value);
      }
      break;

    case USER_LIST:
      if (value == null) {
        unsetUserList();
      } else {
        setUserList((List<UserOutput>)value);
      }
      break;

    case RETURN_CODE:
      if (value == null) {
        unsetReturnCode();
      } else {
        setReturnCode((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUM_COUNT:
      return Integer.valueOf(getSumCount());

    case USER_LIST:
      return getUserList();

    case RETURN_CODE:
      return Integer.valueOf(getReturnCode());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUM_COUNT:
      return isSetSumCount();
    case USER_LIST:
      return isSetUserList();
    case RETURN_CODE:
      return isSetReturnCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UsersOutput)
      return this.equals((UsersOutput)that);
    return false;
  }

  public boolean equals(UsersOutput that) {
    if (that == null)
      return false;

    boolean this_present_sumCount = true;
    boolean that_present_sumCount = true;
    if (this_present_sumCount || that_present_sumCount) {
      if (!(this_present_sumCount && that_present_sumCount))
        return false;
      if (this.sumCount != that.sumCount)
        return false;
    }

    boolean this_present_userList = true && this.isSetUserList();
    boolean that_present_userList = true && that.isSetUserList();
    if (this_present_userList || that_present_userList) {
      if (!(this_present_userList && that_present_userList))
        return false;
      if (!this.userList.equals(that.userList))
        return false;
    }

    boolean this_present_returnCode = true;
    boolean that_present_returnCode = true;
    if (this_present_returnCode || that_present_returnCode) {
      if (!(this_present_returnCode && that_present_returnCode))
        return false;
      if (this.returnCode != that.returnCode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UsersOutput other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSumCount()).compareTo(other.isSetSumCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSumCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sumCount, other.sumCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserList()).compareTo(other.isSetUserList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userList, other.userList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnCode()).compareTo(other.isSetReturnCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnCode, other.returnCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UsersOutput(");
    boolean first = true;

    sb.append("sumCount:");
    sb.append(this.sumCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userList:");
    if (this.userList == null) {
      sb.append("null");
    } else {
      sb.append(this.userList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnCode:");
    sb.append(this.returnCode);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UsersOutputStandardSchemeFactory implements SchemeFactory {
    public UsersOutputStandardScheme getScheme() {
      return new UsersOutputStandardScheme();
    }
  }

  private static class UsersOutputStandardScheme extends StandardScheme<UsersOutput> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UsersOutput struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUM_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sumCount = iprot.readI32();
              struct.setSumCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userList = new ArrayList<UserOutput>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  UserOutput _elem2;
                  _elem2 = new UserOutput();
                  _elem2.read(iprot);
                  struct.userList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setUserListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RETURN_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.returnCode = iprot.readI32();
              struct.setReturnCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UsersOutput struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUM_COUNT_FIELD_DESC);
      oprot.writeI32(struct.sumCount);
      oprot.writeFieldEnd();
      if (struct.userList != null) {
        oprot.writeFieldBegin(USER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userList.size()));
          for (UserOutput _iter3 : struct.userList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RETURN_CODE_FIELD_DESC);
      oprot.writeI32(struct.returnCode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UsersOutputTupleSchemeFactory implements SchemeFactory {
    public UsersOutputTupleScheme getScheme() {
      return new UsersOutputTupleScheme();
    }
  }

  private static class UsersOutputTupleScheme extends TupleScheme<UsersOutput> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UsersOutput struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSumCount()) {
        optionals.set(0);
      }
      if (struct.isSetUserList()) {
        optionals.set(1);
      }
      if (struct.isSetReturnCode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSumCount()) {
        oprot.writeI32(struct.sumCount);
      }
      if (struct.isSetUserList()) {
        {
          oprot.writeI32(struct.userList.size());
          for (UserOutput _iter4 : struct.userList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetReturnCode()) {
        oprot.writeI32(struct.returnCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UsersOutput struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.sumCount = iprot.readI32();
        struct.setSumCountIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.userList = new ArrayList<UserOutput>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            UserOutput _elem7;
            _elem7 = new UserOutput();
            _elem7.read(iprot);
            struct.userList.add(_elem7);
          }
        }
        struct.setUserListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.returnCode = iprot.readI32();
        struct.setReturnCodeIsSet(true);
      }
    }
  }

}

