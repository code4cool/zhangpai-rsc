/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shalong.zhangpai.rsc.thrift.region;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RegionService {

  public interface Iface {

    public GetCountyByCityIdOutput getCountyByCityId(GetCountyByCityIdInput input) throws org.apache.thrift.TException;

    public GetRedisCountyAllByCityIdOutput getRedisCountyAllByCityId(GetRedisCountyAllByCityIdInput input) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getCountyByCityId(GetCountyByCityIdInput input, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRedisCountyAllByCityId(GetRedisCountyAllByCityIdInput input, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public GetCountyByCityIdOutput getCountyByCityId(GetCountyByCityIdInput input) throws org.apache.thrift.TException
    {
      send_getCountyByCityId(input);
      return recv_getCountyByCityId();
    }

    public void send_getCountyByCityId(GetCountyByCityIdInput input) throws org.apache.thrift.TException
    {
      getCountyByCityId_args args = new getCountyByCityId_args();
      args.setInput(input);
      sendBase("getCountyByCityId", args);
    }

    public GetCountyByCityIdOutput recv_getCountyByCityId() throws org.apache.thrift.TException
    {
      getCountyByCityId_result result = new getCountyByCityId_result();
      receiveBase(result, "getCountyByCityId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCountyByCityId failed: unknown result");
    }

    public GetRedisCountyAllByCityIdOutput getRedisCountyAllByCityId(GetRedisCountyAllByCityIdInput input) throws org.apache.thrift.TException
    {
      send_getRedisCountyAllByCityId(input);
      return recv_getRedisCountyAllByCityId();
    }

    public void send_getRedisCountyAllByCityId(GetRedisCountyAllByCityIdInput input) throws org.apache.thrift.TException
    {
      getRedisCountyAllByCityId_args args = new getRedisCountyAllByCityId_args();
      args.setInput(input);
      sendBase("getRedisCountyAllByCityId", args);
    }

    public GetRedisCountyAllByCityIdOutput recv_getRedisCountyAllByCityId() throws org.apache.thrift.TException
    {
      getRedisCountyAllByCityId_result result = new getRedisCountyAllByCityId_result();
      receiveBase(result, "getRedisCountyAllByCityId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRedisCountyAllByCityId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getCountyByCityId(GetCountyByCityIdInput input, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCountyByCityId_call method_call = new getCountyByCityId_call(input, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCountyByCityId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GetCountyByCityIdInput input;
      public getCountyByCityId_call(GetCountyByCityIdInput input, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.input = input;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCountyByCityId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCountyByCityId_args args = new getCountyByCityId_args();
        args.setInput(input);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetCountyByCityIdOutput getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCountyByCityId();
      }
    }

    public void getRedisCountyAllByCityId(GetRedisCountyAllByCityIdInput input, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRedisCountyAllByCityId_call method_call = new getRedisCountyAllByCityId_call(input, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRedisCountyAllByCityId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GetRedisCountyAllByCityIdInput input;
      public getRedisCountyAllByCityId_call(GetRedisCountyAllByCityIdInput input, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.input = input;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRedisCountyAllByCityId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRedisCountyAllByCityId_args args = new getRedisCountyAllByCityId_args();
        args.setInput(input);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetRedisCountyAllByCityIdOutput getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRedisCountyAllByCityId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getCountyByCityId", new getCountyByCityId());
      processMap.put("getRedisCountyAllByCityId", new getRedisCountyAllByCityId());
      return processMap;
    }

    public static class getCountyByCityId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCountyByCityId_args> {
      public getCountyByCityId() {
        super("getCountyByCityId");
      }

      public getCountyByCityId_args getEmptyArgsInstance() {
        return new getCountyByCityId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCountyByCityId_result getResult(I iface, getCountyByCityId_args args) throws org.apache.thrift.TException {
        getCountyByCityId_result result = new getCountyByCityId_result();
        result.success = iface.getCountyByCityId(args.input);
        return result;
      }
    }

    public static class getRedisCountyAllByCityId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRedisCountyAllByCityId_args> {
      public getRedisCountyAllByCityId() {
        super("getRedisCountyAllByCityId");
      }

      public getRedisCountyAllByCityId_args getEmptyArgsInstance() {
        return new getRedisCountyAllByCityId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRedisCountyAllByCityId_result getResult(I iface, getRedisCountyAllByCityId_args args) throws org.apache.thrift.TException {
        getRedisCountyAllByCityId_result result = new getRedisCountyAllByCityId_result();
        result.success = iface.getRedisCountyAllByCityId(args.input);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getCountyByCityId", new getCountyByCityId());
      processMap.put("getRedisCountyAllByCityId", new getRedisCountyAllByCityId());
      return processMap;
    }

    public static class getCountyByCityId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCountyByCityId_args, GetCountyByCityIdOutput> {
      public getCountyByCityId() {
        super("getCountyByCityId");
      }

      public getCountyByCityId_args getEmptyArgsInstance() {
        return new getCountyByCityId_args();
      }

      public AsyncMethodCallback<GetCountyByCityIdOutput> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GetCountyByCityIdOutput>() { 
          public void onComplete(GetCountyByCityIdOutput o) {
            getCountyByCityId_result result = new getCountyByCityId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCountyByCityId_result result = new getCountyByCityId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCountyByCityId_args args, org.apache.thrift.async.AsyncMethodCallback<GetCountyByCityIdOutput> resultHandler) throws TException {
        iface.getCountyByCityId(args.input,resultHandler);
      }
    }

    public static class getRedisCountyAllByCityId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRedisCountyAllByCityId_args, GetRedisCountyAllByCityIdOutput> {
      public getRedisCountyAllByCityId() {
        super("getRedisCountyAllByCityId");
      }

      public getRedisCountyAllByCityId_args getEmptyArgsInstance() {
        return new getRedisCountyAllByCityId_args();
      }

      public AsyncMethodCallback<GetRedisCountyAllByCityIdOutput> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GetRedisCountyAllByCityIdOutput>() { 
          public void onComplete(GetRedisCountyAllByCityIdOutput o) {
            getRedisCountyAllByCityId_result result = new getRedisCountyAllByCityId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRedisCountyAllByCityId_result result = new getRedisCountyAllByCityId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRedisCountyAllByCityId_args args, org.apache.thrift.async.AsyncMethodCallback<GetRedisCountyAllByCityIdOutput> resultHandler) throws TException {
        iface.getRedisCountyAllByCityId(args.input,resultHandler);
      }
    }

  }

  public static class getCountyByCityId_args implements org.apache.thrift.TBase<getCountyByCityId_args, getCountyByCityId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCountyByCityId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCountyByCityId_args");

    private static final org.apache.thrift.protocol.TField INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("input", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCountyByCityId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCountyByCityId_argsTupleSchemeFactory());
    }

    public GetCountyByCityIdInput input; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT((short)1, "input");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT
            return INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT, new org.apache.thrift.meta_data.FieldMetaData("input", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetCountyByCityIdInput.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCountyByCityId_args.class, metaDataMap);
    }

    public getCountyByCityId_args() {
    }

    public getCountyByCityId_args(
      GetCountyByCityIdInput input)
    {
      this();
      this.input = input;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountyByCityId_args(getCountyByCityId_args other) {
      if (other.isSetInput()) {
        this.input = new GetCountyByCityIdInput(other.input);
      }
    }

    public getCountyByCityId_args deepCopy() {
      return new getCountyByCityId_args(this);
    }

    @Override
    public void clear() {
      this.input = null;
    }

    public GetCountyByCityIdInput getInput() {
      return this.input;
    }

    public getCountyByCityId_args setInput(GetCountyByCityIdInput input) {
      this.input = input;
      return this;
    }

    public void unsetInput() {
      this.input = null;
    }

    /** Returns true if field input is set (has been assigned a value) and false otherwise */
    public boolean isSetInput() {
      return this.input != null;
    }

    public void setInputIsSet(boolean value) {
      if (!value) {
        this.input = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT:
        if (value == null) {
          unsetInput();
        } else {
          setInput((GetCountyByCityIdInput)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT:
        return getInput();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT:
        return isSetInput();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountyByCityId_args)
        return this.equals((getCountyByCityId_args)that);
      return false;
    }

    public boolean equals(getCountyByCityId_args that) {
      if (that == null)
        return false;

      boolean this_present_input = true && this.isSetInput();
      boolean that_present_input = true && that.isSetInput();
      if (this_present_input || that_present_input) {
        if (!(this_present_input && that_present_input))
          return false;
        if (!this.input.equals(that.input))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCountyByCityId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInput()).compareTo(other.isSetInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input, other.input);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCountyByCityId_args(");
      boolean first = true;

      sb.append("input:");
      if (this.input == null) {
        sb.append("null");
      } else {
        sb.append(this.input);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (input != null) {
        input.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCountyByCityId_argsStandardSchemeFactory implements SchemeFactory {
      public getCountyByCityId_argsStandardScheme getScheme() {
        return new getCountyByCityId_argsStandardScheme();
      }
    }

    private static class getCountyByCityId_argsStandardScheme extends StandardScheme<getCountyByCityId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCountyByCityId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.input = new GetCountyByCityIdInput();
                struct.input.read(iprot);
                struct.setInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCountyByCityId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.input != null) {
          oprot.writeFieldBegin(INPUT_FIELD_DESC);
          struct.input.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCountyByCityId_argsTupleSchemeFactory implements SchemeFactory {
      public getCountyByCityId_argsTupleScheme getScheme() {
        return new getCountyByCityId_argsTupleScheme();
      }
    }

    private static class getCountyByCityId_argsTupleScheme extends TupleScheme<getCountyByCityId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCountyByCityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInput()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInput()) {
          struct.input.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCountyByCityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.input = new GetCountyByCityIdInput();
          struct.input.read(iprot);
          struct.setInputIsSet(true);
        }
      }
    }

  }

  public static class getCountyByCityId_result implements org.apache.thrift.TBase<getCountyByCityId_result, getCountyByCityId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCountyByCityId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCountyByCityId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCountyByCityId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCountyByCityId_resultTupleSchemeFactory());
    }

    public GetCountyByCityIdOutput success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetCountyByCityIdOutput.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCountyByCityId_result.class, metaDataMap);
    }

    public getCountyByCityId_result() {
    }

    public getCountyByCityId_result(
      GetCountyByCityIdOutput success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountyByCityId_result(getCountyByCityId_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetCountyByCityIdOutput(other.success);
      }
    }

    public getCountyByCityId_result deepCopy() {
      return new getCountyByCityId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetCountyByCityIdOutput getSuccess() {
      return this.success;
    }

    public getCountyByCityId_result setSuccess(GetCountyByCityIdOutput success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetCountyByCityIdOutput)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountyByCityId_result)
        return this.equals((getCountyByCityId_result)that);
      return false;
    }

    public boolean equals(getCountyByCityId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCountyByCityId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCountyByCityId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCountyByCityId_resultStandardSchemeFactory implements SchemeFactory {
      public getCountyByCityId_resultStandardScheme getScheme() {
        return new getCountyByCityId_resultStandardScheme();
      }
    }

    private static class getCountyByCityId_resultStandardScheme extends StandardScheme<getCountyByCityId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCountyByCityId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetCountyByCityIdOutput();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCountyByCityId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCountyByCityId_resultTupleSchemeFactory implements SchemeFactory {
      public getCountyByCityId_resultTupleScheme getScheme() {
        return new getCountyByCityId_resultTupleScheme();
      }
    }

    private static class getCountyByCityId_resultTupleScheme extends TupleScheme<getCountyByCityId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCountyByCityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCountyByCityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetCountyByCityIdOutput();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRedisCountyAllByCityId_args implements org.apache.thrift.TBase<getRedisCountyAllByCityId_args, getRedisCountyAllByCityId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRedisCountyAllByCityId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRedisCountyAllByCityId_args");

    private static final org.apache.thrift.protocol.TField INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("input", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRedisCountyAllByCityId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRedisCountyAllByCityId_argsTupleSchemeFactory());
    }

    public GetRedisCountyAllByCityIdInput input; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT((short)1, "input");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT
            return INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT, new org.apache.thrift.meta_data.FieldMetaData("input", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetRedisCountyAllByCityIdInput.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRedisCountyAllByCityId_args.class, metaDataMap);
    }

    public getRedisCountyAllByCityId_args() {
    }

    public getRedisCountyAllByCityId_args(
      GetRedisCountyAllByCityIdInput input)
    {
      this();
      this.input = input;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRedisCountyAllByCityId_args(getRedisCountyAllByCityId_args other) {
      if (other.isSetInput()) {
        this.input = new GetRedisCountyAllByCityIdInput(other.input);
      }
    }

    public getRedisCountyAllByCityId_args deepCopy() {
      return new getRedisCountyAllByCityId_args(this);
    }

    @Override
    public void clear() {
      this.input = null;
    }

    public GetRedisCountyAllByCityIdInput getInput() {
      return this.input;
    }

    public getRedisCountyAllByCityId_args setInput(GetRedisCountyAllByCityIdInput input) {
      this.input = input;
      return this;
    }

    public void unsetInput() {
      this.input = null;
    }

    /** Returns true if field input is set (has been assigned a value) and false otherwise */
    public boolean isSetInput() {
      return this.input != null;
    }

    public void setInputIsSet(boolean value) {
      if (!value) {
        this.input = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT:
        if (value == null) {
          unsetInput();
        } else {
          setInput((GetRedisCountyAllByCityIdInput)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT:
        return getInput();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT:
        return isSetInput();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRedisCountyAllByCityId_args)
        return this.equals((getRedisCountyAllByCityId_args)that);
      return false;
    }

    public boolean equals(getRedisCountyAllByCityId_args that) {
      if (that == null)
        return false;

      boolean this_present_input = true && this.isSetInput();
      boolean that_present_input = true && that.isSetInput();
      if (this_present_input || that_present_input) {
        if (!(this_present_input && that_present_input))
          return false;
        if (!this.input.equals(that.input))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRedisCountyAllByCityId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInput()).compareTo(other.isSetInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input, other.input);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRedisCountyAllByCityId_args(");
      boolean first = true;

      sb.append("input:");
      if (this.input == null) {
        sb.append("null");
      } else {
        sb.append(this.input);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (input != null) {
        input.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRedisCountyAllByCityId_argsStandardSchemeFactory implements SchemeFactory {
      public getRedisCountyAllByCityId_argsStandardScheme getScheme() {
        return new getRedisCountyAllByCityId_argsStandardScheme();
      }
    }

    private static class getRedisCountyAllByCityId_argsStandardScheme extends StandardScheme<getRedisCountyAllByCityId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRedisCountyAllByCityId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.input = new GetRedisCountyAllByCityIdInput();
                struct.input.read(iprot);
                struct.setInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRedisCountyAllByCityId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.input != null) {
          oprot.writeFieldBegin(INPUT_FIELD_DESC);
          struct.input.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRedisCountyAllByCityId_argsTupleSchemeFactory implements SchemeFactory {
      public getRedisCountyAllByCityId_argsTupleScheme getScheme() {
        return new getRedisCountyAllByCityId_argsTupleScheme();
      }
    }

    private static class getRedisCountyAllByCityId_argsTupleScheme extends TupleScheme<getRedisCountyAllByCityId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRedisCountyAllByCityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInput()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInput()) {
          struct.input.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRedisCountyAllByCityId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.input = new GetRedisCountyAllByCityIdInput();
          struct.input.read(iprot);
          struct.setInputIsSet(true);
        }
      }
    }

  }

  public static class getRedisCountyAllByCityId_result implements org.apache.thrift.TBase<getRedisCountyAllByCityId_result, getRedisCountyAllByCityId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRedisCountyAllByCityId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRedisCountyAllByCityId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRedisCountyAllByCityId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRedisCountyAllByCityId_resultTupleSchemeFactory());
    }

    public GetRedisCountyAllByCityIdOutput success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetRedisCountyAllByCityIdOutput.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRedisCountyAllByCityId_result.class, metaDataMap);
    }

    public getRedisCountyAllByCityId_result() {
    }

    public getRedisCountyAllByCityId_result(
      GetRedisCountyAllByCityIdOutput success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRedisCountyAllByCityId_result(getRedisCountyAllByCityId_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetRedisCountyAllByCityIdOutput(other.success);
      }
    }

    public getRedisCountyAllByCityId_result deepCopy() {
      return new getRedisCountyAllByCityId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetRedisCountyAllByCityIdOutput getSuccess() {
      return this.success;
    }

    public getRedisCountyAllByCityId_result setSuccess(GetRedisCountyAllByCityIdOutput success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetRedisCountyAllByCityIdOutput)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRedisCountyAllByCityId_result)
        return this.equals((getRedisCountyAllByCityId_result)that);
      return false;
    }

    public boolean equals(getRedisCountyAllByCityId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRedisCountyAllByCityId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRedisCountyAllByCityId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRedisCountyAllByCityId_resultStandardSchemeFactory implements SchemeFactory {
      public getRedisCountyAllByCityId_resultStandardScheme getScheme() {
        return new getRedisCountyAllByCityId_resultStandardScheme();
      }
    }

    private static class getRedisCountyAllByCityId_resultStandardScheme extends StandardScheme<getRedisCountyAllByCityId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRedisCountyAllByCityId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetRedisCountyAllByCityIdOutput();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRedisCountyAllByCityId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRedisCountyAllByCityId_resultTupleSchemeFactory implements SchemeFactory {
      public getRedisCountyAllByCityId_resultTupleScheme getScheme() {
        return new getRedisCountyAllByCityId_resultTupleScheme();
      }
    }

    private static class getRedisCountyAllByCityId_resultTupleScheme extends TupleScheme<getRedisCountyAllByCityId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRedisCountyAllByCityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRedisCountyAllByCityId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetRedisCountyAllByCityIdOutput();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
