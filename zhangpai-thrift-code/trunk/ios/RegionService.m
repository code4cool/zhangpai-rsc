/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "RegionService.h"

@implementation GetCountyByCityIdInput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.cityId = 110100;

  self.size = 6;

#endif
  return self;
}

- (id) initWithCityId: (int32_t) cityId size: (int32_t) size orderValue: (int32_t) orderValue version: (NSString *) version
{
  self = [super init];
  __cityId = cityId;
  __cityId_isset = YES;
  __size = size;
  __size_isset = YES;
  __orderValue = orderValue;
  __orderValue_isset = YES;
  __version = [version retain_stub];
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"cityId"])
  {
    __cityId = [decoder decodeInt32ForKey: @"cityId"];
    __cityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"size"])
  {
    __size = [decoder decodeInt32ForKey: @"size"];
    __size_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderValue"])
  {
    __orderValue = [decoder decodeInt32ForKey: @"orderValue"];
    __orderValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [[decoder decodeObjectForKey: @"version"] retain_stub];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__cityId_isset)
  {
    [encoder encodeInt32: __cityId forKey: @"cityId"];
  }
  if (__size_isset)
  {
    [encoder encodeInt32: __size forKey: @"size"];
  }
  if (__orderValue_isset)
  {
    [encoder encodeInt32: __orderValue forKey: @"orderValue"];
  }
  if (__version_isset)
  {
    [encoder encodeObject: __version forKey: @"version"];
  }
}

- (void) dealloc
{
  [__version release_stub];
  [super dealloc_stub];
}

- (int32_t) cityId {
  return __cityId;
}

- (void) setCityId: (int32_t) cityId {
  __cityId = cityId;
  __cityId_isset = YES;
}

- (BOOL) cityIdIsSet {
  return __cityId_isset;
}

- (void) unsetCityId {
  __cityId_isset = NO;
}

- (int32_t) size {
  return __size;
}

- (void) setSize: (int32_t) size {
  __size = size;
  __size_isset = YES;
}

- (BOOL) sizeIsSet {
  return __size_isset;
}

- (void) unsetSize {
  __size_isset = NO;
}

- (int32_t) orderValue {
  return __orderValue;
}

- (void) setOrderValue: (int32_t) orderValue {
  __orderValue = orderValue;
  __orderValue_isset = YES;
}

- (BOOL) orderValueIsSet {
  return __orderValue_isset;
}

- (void) unsetOrderValue {
  __orderValue_isset = NO;
}

- (NSString *) version {
  return [[__version retain_stub] autorelease_stub];
}

- (void) setVersion: (NSString *) version {
  [version retain_stub];
  [__version release_stub];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release_stub];
  __version = nil;
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCountyByCityIdInput"];
  if (__cityId_isset) {
    [outProtocol writeFieldBeginWithName: @"cityId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __cityId];
    [outProtocol writeFieldEnd];
  }
  if (__size_isset) {
    [outProtocol writeFieldBeginWithName: @"size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __size];
    [outProtocol writeFieldEnd];
  }
  if (__orderValue_isset) {
    [outProtocol writeFieldBeginWithName: @"orderValue" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __orderValue];
    [outProtocol writeFieldEnd];
  }
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCountyByCityIdInput("];
  [ms appendString: @"cityId:"];
  [ms appendFormat: @"%i", __cityId];
  [ms appendString: @",size:"];
  [ms appendFormat: @"%i", __size];
  [ms appendString: @",orderValue:"];
  [ms appendFormat: @"%i", __orderValue];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CountyOutput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id cityId: (int32_t) cityId name: (NSString *) name
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __cityId = cityId;
  __cityId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityId"])
  {
    __cityId = [decoder decodeInt32ForKey: @"cityId"];
    __cityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__cityId_isset)
  {
    [encoder encodeInt32: __cityId forKey: @"cityId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int32_t) cityId {
  return __cityId;
}

- (void) setCityId: (int32_t) cityId {
  __cityId = cityId;
  __cityId_isset = YES;
}

- (BOOL) cityIdIsSet {
  return __cityId_isset;
}

- (void) unsetCityId {
  __cityId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CountyOutput"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__cityId_isset) {
    [outProtocol writeFieldBeginWithName: @"cityId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __cityId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CountyOutput("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",cityId:"];
  [ms appendFormat: @"%i", __cityId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetCountyByCityIdOutput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithValues: (NSMutableArray *) values returnCode: (int32_t) returnCode
{
  self = [super init];
  __values = [values retain_stub];
  __values_isset = YES;
  __returnCode = returnCode;
  __returnCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"values"])
  {
    __values = [[decoder decodeObjectForKey: @"values"] retain_stub];
    __values_isset = YES;
  }
  if ([decoder containsValueForKey: @"returnCode"])
  {
    __returnCode = [decoder decodeInt32ForKey: @"returnCode"];
    __returnCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__values_isset)
  {
    [encoder encodeObject: __values forKey: @"values"];
  }
  if (__returnCode_isset)
  {
    [encoder encodeInt32: __returnCode forKey: @"returnCode"];
  }
}

- (void) dealloc
{
  [__values release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) values {
  return [[__values retain_stub] autorelease_stub];
}

- (void) setValues: (NSMutableArray *) values {
  [values retain_stub];
  [__values release_stub];
  __values = values;
  __values_isset = YES;
}

- (BOOL) valuesIsSet {
  return __values_isset;
}

- (void) unsetValues {
  [__values release_stub];
  __values = nil;
  __values_isset = NO;
}

- (int32_t) returnCode {
  return __returnCode;
}

- (void) setReturnCode: (int32_t) returnCode {
  __returnCode = returnCode;
  __returnCode_isset = YES;
}

- (BOOL) returnCodeIsSet {
  return __returnCode_isset;
}

- (void) unsetReturnCode {
  __returnCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            CountyOutput *_elem2 = [[CountyOutput alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setValues: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReturnCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCountyByCityIdOutput"];
  if (__values_isset) {
    if (__values != nil) {
      [outProtocol writeFieldBeginWithName: @"values" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__values count]];
        int i4;
        for (i4 = 0; i4 < [__values count]; i4++)
        {
          [[__values objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__returnCode_isset) {
    [outProtocol writeFieldBeginWithName: @"returnCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __returnCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCountyByCityIdOutput("];
  [ms appendString: @"values:"];
  [ms appendFormat: @"%@", __values];
  [ms appendString: @",returnCode:"];
  [ms appendFormat: @"%i", __returnCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetRedisCountyAllByCityIdInput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.cityId = 110100;

#endif
  return self;
}

- (id) initWithCityId: (int32_t) cityId version: (NSString *) version
{
  self = [super init];
  __cityId = cityId;
  __cityId_isset = YES;
  __version = [version retain_stub];
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"cityId"])
  {
    __cityId = [decoder decodeInt32ForKey: @"cityId"];
    __cityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [[decoder decodeObjectForKey: @"version"] retain_stub];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__cityId_isset)
  {
    [encoder encodeInt32: __cityId forKey: @"cityId"];
  }
  if (__version_isset)
  {
    [encoder encodeObject: __version forKey: @"version"];
  }
}

- (void) dealloc
{
  [__version release_stub];
  [super dealloc_stub];
}

- (int32_t) cityId {
  return __cityId;
}

- (void) setCityId: (int32_t) cityId {
  __cityId = cityId;
  __cityId_isset = YES;
}

- (BOOL) cityIdIsSet {
  return __cityId_isset;
}

- (void) unsetCityId {
  __cityId_isset = NO;
}

- (NSString *) version {
  return [[__version retain_stub] autorelease_stub];
}

- (void) setVersion: (NSString *) version {
  [version retain_stub];
  [__version release_stub];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release_stub];
  __version = nil;
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRedisCountyAllByCityIdInput"];
  if (__cityId_isset) {
    [outProtocol writeFieldBeginWithName: @"cityId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __cityId];
    [outProtocol writeFieldEnd];
  }
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRedisCountyAllByCityIdInput("];
  [ms appendString: @"cityId:"];
  [ms appendFormat: @"%i", __cityId];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetRedisCountyAllByCityIdOutput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithJson: (NSString *) json returnCode: (int32_t) returnCode
{
  self = [super init];
  __json = [json retain_stub];
  __json_isset = YES;
  __returnCode = returnCode;
  __returnCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"json"])
  {
    __json = [[decoder decodeObjectForKey: @"json"] retain_stub];
    __json_isset = YES;
  }
  if ([decoder containsValueForKey: @"returnCode"])
  {
    __returnCode = [decoder decodeInt32ForKey: @"returnCode"];
    __returnCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__json_isset)
  {
    [encoder encodeObject: __json forKey: @"json"];
  }
  if (__returnCode_isset)
  {
    [encoder encodeInt32: __returnCode forKey: @"returnCode"];
  }
}

- (void) dealloc
{
  [__json release_stub];
  [super dealloc_stub];
}

- (NSString *) json {
  return [[__json retain_stub] autorelease_stub];
}

- (void) setJson: (NSString *) json {
  [json retain_stub];
  [__json release_stub];
  __json = json;
  __json_isset = YES;
}

- (BOOL) jsonIsSet {
  return __json_isset;
}

- (void) unsetJson {
  [__json release_stub];
  __json = nil;
  __json_isset = NO;
}

- (int32_t) returnCode {
  return __returnCode;
}

- (void) setReturnCode: (int32_t) returnCode {
  __returnCode = returnCode;
  __returnCode_isset = YES;
}

- (BOOL) returnCodeIsSet {
  return __returnCode_isset;
}

- (void) unsetReturnCode {
  __returnCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setJson: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReturnCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRedisCountyAllByCityIdOutput"];
  if (__json_isset) {
    if (__json != nil) {
      [outProtocol writeFieldBeginWithName: @"json" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __json];
      [outProtocol writeFieldEnd];
    }
  }
  if (__returnCode_isset) {
    [outProtocol writeFieldBeginWithName: @"returnCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __returnCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRedisCountyAllByCityIdOutput("];
  [ms appendString: @"json:"];
  [ms appendFormat: @"\"%@\"", __json];
  [ms appendString: @",returnCode:"];
  [ms appendFormat: @"%i", __returnCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation RegionServiceConstants
+ (void) initialize {
}
@end

@interface getCountyByCityId_args : NSObject <TBase, NSCoding> {
  GetCountyByCityIdInput * __input;

  BOOL __input_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=input, setter=setInput:) GetCountyByCityIdInput * input;
#endif

- (id) init;
- (id) initWithInput: (GetCountyByCityIdInput *) input;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetCountyByCityIdInput *) input;
- (void) setInput: (GetCountyByCityIdInput *) input;
#endif
- (BOOL) inputIsSet;

@end

@implementation getCountyByCityId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithInput: (GetCountyByCityIdInput *) input
{
  self = [super init];
  __input = [input retain_stub];
  __input_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"input"])
  {
    __input = [[decoder decodeObjectForKey: @"input"] retain_stub];
    __input_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__input_isset)
  {
    [encoder encodeObject: __input forKey: @"input"];
  }
}

- (void) dealloc
{
  [__input release_stub];
  [super dealloc_stub];
}

- (GetCountyByCityIdInput *) input {
  return [[__input retain_stub] autorelease_stub];
}

- (void) setInput: (GetCountyByCityIdInput *) input {
  [input retain_stub];
  [__input release_stub];
  __input = input;
  __input_isset = YES;
}

- (BOOL) inputIsSet {
  return __input_isset;
}

- (void) unsetInput {
  [__input release_stub];
  __input = nil;
  __input_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetCountyByCityIdInput *fieldValue = [[GetCountyByCityIdInput alloc] init];
          [fieldValue read: inProtocol];
          [self setInput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCountyByCityId_args"];
  if (__input_isset) {
    if (__input != nil) {
      [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
      [__input write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCountyByCityId_args("];
  [ms appendString: @"input:"];
  [ms appendFormat: @"%@", __input];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCountyByCityId_result : NSObject <TBase, NSCoding> {
  GetCountyByCityIdOutput * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetCountyByCityIdOutput * success;
#endif

- (id) init;
- (id) initWithSuccess: (GetCountyByCityIdOutput *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetCountyByCityIdOutput *) success;
- (void) setSuccess: (GetCountyByCityIdOutput *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetCountyByCityId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetCountyByCityIdOutput *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (GetCountyByCityIdOutput *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetCountyByCityIdOutput *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetCountyByCityIdOutput *fieldValue = [[GetCountyByCityIdOutput alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCountyByCityId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCountyByCityId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getRedisCountyAllByCityId_args : NSObject <TBase, NSCoding> {
  GetRedisCountyAllByCityIdInput * __input;

  BOOL __input_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=input, setter=setInput:) GetRedisCountyAllByCityIdInput * input;
#endif

- (id) init;
- (id) initWithInput: (GetRedisCountyAllByCityIdInput *) input;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetRedisCountyAllByCityIdInput *) input;
- (void) setInput: (GetRedisCountyAllByCityIdInput *) input;
#endif
- (BOOL) inputIsSet;

@end

@implementation getRedisCountyAllByCityId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithInput: (GetRedisCountyAllByCityIdInput *) input
{
  self = [super init];
  __input = [input retain_stub];
  __input_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"input"])
  {
    __input = [[decoder decodeObjectForKey: @"input"] retain_stub];
    __input_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__input_isset)
  {
    [encoder encodeObject: __input forKey: @"input"];
  }
}

- (void) dealloc
{
  [__input release_stub];
  [super dealloc_stub];
}

- (GetRedisCountyAllByCityIdInput *) input {
  return [[__input retain_stub] autorelease_stub];
}

- (void) setInput: (GetRedisCountyAllByCityIdInput *) input {
  [input retain_stub];
  [__input release_stub];
  __input = input;
  __input_isset = YES;
}

- (BOOL) inputIsSet {
  return __input_isset;
}

- (void) unsetInput {
  [__input release_stub];
  __input = nil;
  __input_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetRedisCountyAllByCityIdInput *fieldValue = [[GetRedisCountyAllByCityIdInput alloc] init];
          [fieldValue read: inProtocol];
          [self setInput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getRedisCountyAllByCityId_args"];
  if (__input_isset) {
    if (__input != nil) {
      [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
      [__input write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getRedisCountyAllByCityId_args("];
  [ms appendString: @"input:"];
  [ms appendFormat: @"%@", __input];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetRedisCountyAllByCityId_result : NSObject <TBase, NSCoding> {
  GetRedisCountyAllByCityIdOutput * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetRedisCountyAllByCityIdOutput * success;
#endif

- (id) init;
- (id) initWithSuccess: (GetRedisCountyAllByCityIdOutput *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetRedisCountyAllByCityIdOutput *) success;
- (void) setSuccess: (GetRedisCountyAllByCityIdOutput *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetRedisCountyAllByCityId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetRedisCountyAllByCityIdOutput *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (GetRedisCountyAllByCityIdOutput *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetRedisCountyAllByCityIdOutput *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetRedisCountyAllByCityIdOutput *fieldValue = [[GetRedisCountyAllByCityIdOutput alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRedisCountyAllByCityId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRedisCountyAllByCityId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RegionServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getCountyByCityId: (GetCountyByCityIdInput *) input
{
  [outProtocol writeMessageBeginWithName: @"getCountyByCityId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCountyByCityId_args"];
  if (input != nil)  {
    [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
    [input write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetCountyByCityIdOutput *) recv_getCountyByCityId
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetCountyByCityId_result * result = [[[GetCountyByCityId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCountyByCityId failed: unknown result"];
}

- (GetCountyByCityIdOutput *) getCountyByCityId: (GetCountyByCityIdInput *) input
{
  [self send_getCountyByCityId : input];
  return [self recv_getCountyByCityId];
}

- (void) send_getRedisCountyAllByCityId: (GetRedisCountyAllByCityIdInput *) input
{
  [outProtocol writeMessageBeginWithName: @"getRedisCountyAllByCityId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getRedisCountyAllByCityId_args"];
  if (input != nil)  {
    [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
    [input write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetRedisCountyAllByCityIdOutput *) recv_getRedisCountyAllByCityId
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetRedisCountyAllByCityId_result * result = [[[GetRedisCountyAllByCityId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getRedisCountyAllByCityId failed: unknown result"];
}

- (GetRedisCountyAllByCityIdOutput *) getRedisCountyAllByCityId: (GetRedisCountyAllByCityIdInput *) input
{
  [self send_getRedisCountyAllByCityId : input];
  return [self recv_getRedisCountyAllByCityId];
}

@end

@implementation RegionServiceProcessor

- (id) initWithRegionService: (id <RegionService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getCountyByCityId_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getCountyByCityId"];
  }
  {
    SEL s = @selector(process_getRedisCountyAllByCityId_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getRedisCountyAllByCityId"];
  }
  return self;
}

- (id<RegionService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getCountyByCityId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getCountyByCityId_args * args = [[getCountyByCityId_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetCountyByCityId_result * result = [[GetCountyByCityId_result alloc] init];
  [result setSuccess: [mService getCountyByCityId: [args input]]];
  [outProtocol writeMessageBeginWithName: @"getCountyByCityId"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getRedisCountyAllByCityId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getRedisCountyAllByCityId_args * args = [[getRedisCountyAllByCityId_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetRedisCountyAllByCityId_result * result = [[GetRedisCountyAllByCityId_result alloc] init];
  [result setSuccess: [mService getRedisCountyAllByCityId: [args input]]];
  [outProtocol writeMessageBeginWithName: @"getRedisCountyAllByCityId"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

