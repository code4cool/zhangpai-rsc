/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "Advertisement.h"

@implementation Advertisement

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id adTitle: (NSString *) adTitle adDescription: (NSString *) adDescription createTime: (NSString *) createTime adLocation: (int32_t) adLocation ipSingleNum: (int32_t) ipSingleNum ipMuchNum: (int32_t) ipMuchNum onlineStatus: (int32_t) onlineStatus auditStatus: (int32_t) auditStatus adImage: (NSString *) adImage adLink: (NSString *) adLink adContent: (NSString *) adContent
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __adTitle = [adTitle retain_stub];
  __adTitle_isset = YES;
  __adDescription = [adDescription retain_stub];
  __adDescription_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __adLocation = adLocation;
  __adLocation_isset = YES;
  __ipSingleNum = ipSingleNum;
  __ipSingleNum_isset = YES;
  __ipMuchNum = ipMuchNum;
  __ipMuchNum_isset = YES;
  __onlineStatus = onlineStatus;
  __onlineStatus_isset = YES;
  __auditStatus = auditStatus;
  __auditStatus_isset = YES;
  __adImage = [adImage retain_stub];
  __adImage_isset = YES;
  __adLink = [adLink retain_stub];
  __adLink_isset = YES;
  __adContent = [adContent retain_stub];
  __adContent_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"adTitle"])
  {
    __adTitle = [[decoder decodeObjectForKey: @"adTitle"] retain_stub];
    __adTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"adDescription"])
  {
    __adDescription = [[decoder decodeObjectForKey: @"adDescription"] retain_stub];
    __adDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"adLocation"])
  {
    __adLocation = [decoder decodeInt32ForKey: @"adLocation"];
    __adLocation_isset = YES;
  }
  if ([decoder containsValueForKey: @"ipSingleNum"])
  {
    __ipSingleNum = [decoder decodeInt32ForKey: @"ipSingleNum"];
    __ipSingleNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"ipMuchNum"])
  {
    __ipMuchNum = [decoder decodeInt32ForKey: @"ipMuchNum"];
    __ipMuchNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"onlineStatus"])
  {
    __onlineStatus = [decoder decodeInt32ForKey: @"onlineStatus"];
    __onlineStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"auditStatus"])
  {
    __auditStatus = [decoder decodeInt32ForKey: @"auditStatus"];
    __auditStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"adImage"])
  {
    __adImage = [[decoder decodeObjectForKey: @"adImage"] retain_stub];
    __adImage_isset = YES;
  }
  if ([decoder containsValueForKey: @"adLink"])
  {
    __adLink = [[decoder decodeObjectForKey: @"adLink"] retain_stub];
    __adLink_isset = YES;
  }
  if ([decoder containsValueForKey: @"adContent"])
  {
    __adContent = [[decoder decodeObjectForKey: @"adContent"] retain_stub];
    __adContent_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__adTitle_isset)
  {
    [encoder encodeObject: __adTitle forKey: @"adTitle"];
  }
  if (__adDescription_isset)
  {
    [encoder encodeObject: __adDescription forKey: @"adDescription"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__adLocation_isset)
  {
    [encoder encodeInt32: __adLocation forKey: @"adLocation"];
  }
  if (__ipSingleNum_isset)
  {
    [encoder encodeInt32: __ipSingleNum forKey: @"ipSingleNum"];
  }
  if (__ipMuchNum_isset)
  {
    [encoder encodeInt32: __ipMuchNum forKey: @"ipMuchNum"];
  }
  if (__onlineStatus_isset)
  {
    [encoder encodeInt32: __onlineStatus forKey: @"onlineStatus"];
  }
  if (__auditStatus_isset)
  {
    [encoder encodeInt32: __auditStatus forKey: @"auditStatus"];
  }
  if (__adImage_isset)
  {
    [encoder encodeObject: __adImage forKey: @"adImage"];
  }
  if (__adLink_isset)
  {
    [encoder encodeObject: __adLink forKey: @"adLink"];
  }
  if (__adContent_isset)
  {
    [encoder encodeObject: __adContent forKey: @"adContent"];
  }
}

- (void) dealloc
{
  [__adTitle release_stub];
  [__adDescription release_stub];
  [__createTime release_stub];
  [__adImage release_stub];
  [__adLink release_stub];
  [__adContent release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) adTitle {
  return [[__adTitle retain_stub] autorelease_stub];
}

- (void) setAdTitle: (NSString *) adTitle {
  [adTitle retain_stub];
  [__adTitle release_stub];
  __adTitle = adTitle;
  __adTitle_isset = YES;
}

- (BOOL) adTitleIsSet {
  return __adTitle_isset;
}

- (void) unsetAdTitle {
  [__adTitle release_stub];
  __adTitle = nil;
  __adTitle_isset = NO;
}

- (NSString *) adDescription {
  return [[__adDescription retain_stub] autorelease_stub];
}

- (void) setAdDescription: (NSString *) adDescription {
  [adDescription retain_stub];
  [__adDescription release_stub];
  __adDescription = adDescription;
  __adDescription_isset = YES;
}

- (BOOL) adDescriptionIsSet {
  return __adDescription_isset;
}

- (void) unsetAdDescription {
  [__adDescription release_stub];
  __adDescription = nil;
  __adDescription_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (int32_t) adLocation {
  return __adLocation;
}

- (void) setAdLocation: (int32_t) adLocation {
  __adLocation = adLocation;
  __adLocation_isset = YES;
}

- (BOOL) adLocationIsSet {
  return __adLocation_isset;
}

- (void) unsetAdLocation {
  __adLocation_isset = NO;
}

- (int32_t) ipSingleNum {
  return __ipSingleNum;
}

- (void) setIpSingleNum: (int32_t) ipSingleNum {
  __ipSingleNum = ipSingleNum;
  __ipSingleNum_isset = YES;
}

- (BOOL) ipSingleNumIsSet {
  return __ipSingleNum_isset;
}

- (void) unsetIpSingleNum {
  __ipSingleNum_isset = NO;
}

- (int32_t) ipMuchNum {
  return __ipMuchNum;
}

- (void) setIpMuchNum: (int32_t) ipMuchNum {
  __ipMuchNum = ipMuchNum;
  __ipMuchNum_isset = YES;
}

- (BOOL) ipMuchNumIsSet {
  return __ipMuchNum_isset;
}

- (void) unsetIpMuchNum {
  __ipMuchNum_isset = NO;
}

- (int32_t) onlineStatus {
  return __onlineStatus;
}

- (void) setOnlineStatus: (int32_t) onlineStatus {
  __onlineStatus = onlineStatus;
  __onlineStatus_isset = YES;
}

- (BOOL) onlineStatusIsSet {
  return __onlineStatus_isset;
}

- (void) unsetOnlineStatus {
  __onlineStatus_isset = NO;
}

- (int32_t) auditStatus {
  return __auditStatus;
}

- (void) setAuditStatus: (int32_t) auditStatus {
  __auditStatus = auditStatus;
  __auditStatus_isset = YES;
}

- (BOOL) auditStatusIsSet {
  return __auditStatus_isset;
}

- (void) unsetAuditStatus {
  __auditStatus_isset = NO;
}

- (NSString *) adImage {
  return [[__adImage retain_stub] autorelease_stub];
}

- (void) setAdImage: (NSString *) adImage {
  [adImage retain_stub];
  [__adImage release_stub];
  __adImage = adImage;
  __adImage_isset = YES;
}

- (BOOL) adImageIsSet {
  return __adImage_isset;
}

- (void) unsetAdImage {
  [__adImage release_stub];
  __adImage = nil;
  __adImage_isset = NO;
}

- (NSString *) adLink {
  return [[__adLink retain_stub] autorelease_stub];
}

- (void) setAdLink: (NSString *) adLink {
  [adLink retain_stub];
  [__adLink release_stub];
  __adLink = adLink;
  __adLink_isset = YES;
}

- (BOOL) adLinkIsSet {
  return __adLink_isset;
}

- (void) unsetAdLink {
  [__adLink release_stub];
  __adLink = nil;
  __adLink_isset = NO;
}

- (NSString *) adContent {
  return [[__adContent retain_stub] autorelease_stub];
}

- (void) setAdContent: (NSString *) adContent {
  [adContent retain_stub];
  [__adContent release_stub];
  __adContent = adContent;
  __adContent_isset = YES;
}

- (BOOL) adContentIsSet {
  return __adContent_isset;
}

- (void) unsetAdContent {
  [__adContent release_stub];
  __adContent = nil;
  __adContent_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAdLocation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIpSingleNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIpMuchNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOnlineStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAuditStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdImage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Advertisement"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__adTitle_isset) {
    if (__adTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"adTitle" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __adTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adDescription_isset) {
    if (__adDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"adDescription" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __adDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adLocation_isset) {
    [outProtocol writeFieldBeginWithName: @"adLocation" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __adLocation];
    [outProtocol writeFieldEnd];
  }
  if (__ipSingleNum_isset) {
    [outProtocol writeFieldBeginWithName: @"ipSingleNum" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __ipSingleNum];
    [outProtocol writeFieldEnd];
  }
  if (__ipMuchNum_isset) {
    [outProtocol writeFieldBeginWithName: @"ipMuchNum" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __ipMuchNum];
    [outProtocol writeFieldEnd];
  }
  if (__onlineStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"onlineStatus" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __onlineStatus];
    [outProtocol writeFieldEnd];
  }
  if (__auditStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"auditStatus" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __auditStatus];
    [outProtocol writeFieldEnd];
  }
  if (__adImage_isset) {
    if (__adImage != nil) {
      [outProtocol writeFieldBeginWithName: @"adImage" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __adImage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adLink_isset) {
    if (__adLink != nil) {
      [outProtocol writeFieldBeginWithName: @"adLink" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __adLink];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adContent_isset) {
    if (__adContent != nil) {
      [outProtocol writeFieldBeginWithName: @"adContent" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __adContent];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Advertisement("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",adTitle:"];
  [ms appendFormat: @"\"%@\"", __adTitle];
  [ms appendString: @",adDescription:"];
  [ms appendFormat: @"\"%@\"", __adDescription];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @",adLocation:"];
  [ms appendFormat: @"%i", __adLocation];
  [ms appendString: @",ipSingleNum:"];
  [ms appendFormat: @"%i", __ipSingleNum];
  [ms appendString: @",ipMuchNum:"];
  [ms appendFormat: @"%i", __ipMuchNum];
  [ms appendString: @",onlineStatus:"];
  [ms appendFormat: @"%i", __onlineStatus];
  [ms appendString: @",auditStatus:"];
  [ms appendFormat: @"%i", __auditStatus];
  [ms appendString: @",adImage:"];
  [ms appendFormat: @"\"%@\"", __adImage];
  [ms appendString: @",adLink:"];
  [ms appendFormat: @"\"%@\"", __adLink];
  [ms appendString: @",adContent:"];
  [ms appendFormat: @"\"%@\"", __adContent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetAdvertisementInput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id version: (NSString *) version
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __version = [version retain_stub];
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [[decoder decodeObjectForKey: @"version"] retain_stub];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__version_isset)
  {
    [encoder encodeObject: __version forKey: @"version"];
  }
}

- (void) dealloc
{
  [__version release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) version {
  return [[__version retain_stub] autorelease_stub];
}

- (void) setVersion: (NSString *) version {
  [version retain_stub];
  [__version release_stub];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release_stub];
  __version = nil;
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAdvertisementInput"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAdvertisementInput("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetAdvertisementOutput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReturnCode: (int32_t) returnCode advertisement: (Advertisement *) advertisement
{
  self = [super init];
  __returnCode = returnCode;
  __returnCode_isset = YES;
  __advertisement = [advertisement retain_stub];
  __advertisement_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"returnCode"])
  {
    __returnCode = [decoder decodeInt32ForKey: @"returnCode"];
    __returnCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"advertisement"])
  {
    __advertisement = [[decoder decodeObjectForKey: @"advertisement"] retain_stub];
    __advertisement_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__returnCode_isset)
  {
    [encoder encodeInt32: __returnCode forKey: @"returnCode"];
  }
  if (__advertisement_isset)
  {
    [encoder encodeObject: __advertisement forKey: @"advertisement"];
  }
}

- (void) dealloc
{
  [__advertisement release_stub];
  [super dealloc_stub];
}

- (int32_t) returnCode {
  return __returnCode;
}

- (void) setReturnCode: (int32_t) returnCode {
  __returnCode = returnCode;
  __returnCode_isset = YES;
}

- (BOOL) returnCodeIsSet {
  return __returnCode_isset;
}

- (void) unsetReturnCode {
  __returnCode_isset = NO;
}

- (Advertisement *) advertisement {
  return [[__advertisement retain_stub] autorelease_stub];
}

- (void) setAdvertisement: (Advertisement *) advertisement {
  [advertisement retain_stub];
  [__advertisement release_stub];
  __advertisement = advertisement;
  __advertisement_isset = YES;
}

- (BOOL) advertisementIsSet {
  return __advertisement_isset;
}

- (void) unsetAdvertisement {
  [__advertisement release_stub];
  __advertisement = nil;
  __advertisement_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReturnCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Advertisement *fieldValue = [[Advertisement alloc] init];
          [fieldValue read: inProtocol];
          [self setAdvertisement: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAdvertisementOutput"];
  if (__returnCode_isset) {
    [outProtocol writeFieldBeginWithName: @"returnCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __returnCode];
    [outProtocol writeFieldEnd];
  }
  if (__advertisement_isset) {
    if (__advertisement != nil) {
      [outProtocol writeFieldBeginWithName: @"advertisement" type: TType_STRUCT fieldID: 2];
      [__advertisement write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAdvertisementOutput("];
  [ms appendString: @"returnCode:"];
  [ms appendFormat: @"%i", __returnCode];
  [ms appendString: @",advertisement:"];
  [ms appendFormat: @"%@", __advertisement];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetAdvertisementShowOutput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReturnCode: (int32_t) returnCode id: (int32_t) id adTitle: (NSString *) adTitle adDescription: (NSString *) adDescription createTime: (NSString *) createTime adLocation: (int32_t) adLocation ipSingleNum: (int32_t) ipSingleNum ipMuchNum: (int32_t) ipMuchNum onlineStatus: (int32_t) onlineStatus auditStatus: (int32_t) auditStatus adImage: (NSString *) adImage adLink: (NSString *) adLink adContent: (NSString *) adContent
{
  self = [super init];
  __returnCode = returnCode;
  __returnCode_isset = YES;
  __id = id;
  __id_isset = YES;
  __adTitle = [adTitle retain_stub];
  __adTitle_isset = YES;
  __adDescription = [adDescription retain_stub];
  __adDescription_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __adLocation = adLocation;
  __adLocation_isset = YES;
  __ipSingleNum = ipSingleNum;
  __ipSingleNum_isset = YES;
  __ipMuchNum = ipMuchNum;
  __ipMuchNum_isset = YES;
  __onlineStatus = onlineStatus;
  __onlineStatus_isset = YES;
  __auditStatus = auditStatus;
  __auditStatus_isset = YES;
  __adImage = [adImage retain_stub];
  __adImage_isset = YES;
  __adLink = [adLink retain_stub];
  __adLink_isset = YES;
  __adContent = [adContent retain_stub];
  __adContent_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"returnCode"])
  {
    __returnCode = [decoder decodeInt32ForKey: @"returnCode"];
    __returnCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"adTitle"])
  {
    __adTitle = [[decoder decodeObjectForKey: @"adTitle"] retain_stub];
    __adTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"adDescription"])
  {
    __adDescription = [[decoder decodeObjectForKey: @"adDescription"] retain_stub];
    __adDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"adLocation"])
  {
    __adLocation = [decoder decodeInt32ForKey: @"adLocation"];
    __adLocation_isset = YES;
  }
  if ([decoder containsValueForKey: @"ipSingleNum"])
  {
    __ipSingleNum = [decoder decodeInt32ForKey: @"ipSingleNum"];
    __ipSingleNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"ipMuchNum"])
  {
    __ipMuchNum = [decoder decodeInt32ForKey: @"ipMuchNum"];
    __ipMuchNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"onlineStatus"])
  {
    __onlineStatus = [decoder decodeInt32ForKey: @"onlineStatus"];
    __onlineStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"auditStatus"])
  {
    __auditStatus = [decoder decodeInt32ForKey: @"auditStatus"];
    __auditStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"adImage"])
  {
    __adImage = [[decoder decodeObjectForKey: @"adImage"] retain_stub];
    __adImage_isset = YES;
  }
  if ([decoder containsValueForKey: @"adLink"])
  {
    __adLink = [[decoder decodeObjectForKey: @"adLink"] retain_stub];
    __adLink_isset = YES;
  }
  if ([decoder containsValueForKey: @"adContent"])
  {
    __adContent = [[decoder decodeObjectForKey: @"adContent"] retain_stub];
    __adContent_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__returnCode_isset)
  {
    [encoder encodeInt32: __returnCode forKey: @"returnCode"];
  }
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__adTitle_isset)
  {
    [encoder encodeObject: __adTitle forKey: @"adTitle"];
  }
  if (__adDescription_isset)
  {
    [encoder encodeObject: __adDescription forKey: @"adDescription"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__adLocation_isset)
  {
    [encoder encodeInt32: __adLocation forKey: @"adLocation"];
  }
  if (__ipSingleNum_isset)
  {
    [encoder encodeInt32: __ipSingleNum forKey: @"ipSingleNum"];
  }
  if (__ipMuchNum_isset)
  {
    [encoder encodeInt32: __ipMuchNum forKey: @"ipMuchNum"];
  }
  if (__onlineStatus_isset)
  {
    [encoder encodeInt32: __onlineStatus forKey: @"onlineStatus"];
  }
  if (__auditStatus_isset)
  {
    [encoder encodeInt32: __auditStatus forKey: @"auditStatus"];
  }
  if (__adImage_isset)
  {
    [encoder encodeObject: __adImage forKey: @"adImage"];
  }
  if (__adLink_isset)
  {
    [encoder encodeObject: __adLink forKey: @"adLink"];
  }
  if (__adContent_isset)
  {
    [encoder encodeObject: __adContent forKey: @"adContent"];
  }
}

- (void) dealloc
{
  [__adTitle release_stub];
  [__adDescription release_stub];
  [__createTime release_stub];
  [__adImage release_stub];
  [__adLink release_stub];
  [__adContent release_stub];
  [super dealloc_stub];
}

- (int32_t) returnCode {
  return __returnCode;
}

- (void) setReturnCode: (int32_t) returnCode {
  __returnCode = returnCode;
  __returnCode_isset = YES;
}

- (BOOL) returnCodeIsSet {
  return __returnCode_isset;
}

- (void) unsetReturnCode {
  __returnCode_isset = NO;
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) adTitle {
  return [[__adTitle retain_stub] autorelease_stub];
}

- (void) setAdTitle: (NSString *) adTitle {
  [adTitle retain_stub];
  [__adTitle release_stub];
  __adTitle = adTitle;
  __adTitle_isset = YES;
}

- (BOOL) adTitleIsSet {
  return __adTitle_isset;
}

- (void) unsetAdTitle {
  [__adTitle release_stub];
  __adTitle = nil;
  __adTitle_isset = NO;
}

- (NSString *) adDescription {
  return [[__adDescription retain_stub] autorelease_stub];
}

- (void) setAdDescription: (NSString *) adDescription {
  [adDescription retain_stub];
  [__adDescription release_stub];
  __adDescription = adDescription;
  __adDescription_isset = YES;
}

- (BOOL) adDescriptionIsSet {
  return __adDescription_isset;
}

- (void) unsetAdDescription {
  [__adDescription release_stub];
  __adDescription = nil;
  __adDescription_isset = NO;
}

- (NSString *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (NSString *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (int32_t) adLocation {
  return __adLocation;
}

- (void) setAdLocation: (int32_t) adLocation {
  __adLocation = adLocation;
  __adLocation_isset = YES;
}

- (BOOL) adLocationIsSet {
  return __adLocation_isset;
}

- (void) unsetAdLocation {
  __adLocation_isset = NO;
}

- (int32_t) ipSingleNum {
  return __ipSingleNum;
}

- (void) setIpSingleNum: (int32_t) ipSingleNum {
  __ipSingleNum = ipSingleNum;
  __ipSingleNum_isset = YES;
}

- (BOOL) ipSingleNumIsSet {
  return __ipSingleNum_isset;
}

- (void) unsetIpSingleNum {
  __ipSingleNum_isset = NO;
}

- (int32_t) ipMuchNum {
  return __ipMuchNum;
}

- (void) setIpMuchNum: (int32_t) ipMuchNum {
  __ipMuchNum = ipMuchNum;
  __ipMuchNum_isset = YES;
}

- (BOOL) ipMuchNumIsSet {
  return __ipMuchNum_isset;
}

- (void) unsetIpMuchNum {
  __ipMuchNum_isset = NO;
}

- (int32_t) onlineStatus {
  return __onlineStatus;
}

- (void) setOnlineStatus: (int32_t) onlineStatus {
  __onlineStatus = onlineStatus;
  __onlineStatus_isset = YES;
}

- (BOOL) onlineStatusIsSet {
  return __onlineStatus_isset;
}

- (void) unsetOnlineStatus {
  __onlineStatus_isset = NO;
}

- (int32_t) auditStatus {
  return __auditStatus;
}

- (void) setAuditStatus: (int32_t) auditStatus {
  __auditStatus = auditStatus;
  __auditStatus_isset = YES;
}

- (BOOL) auditStatusIsSet {
  return __auditStatus_isset;
}

- (void) unsetAuditStatus {
  __auditStatus_isset = NO;
}

- (NSString *) adImage {
  return [[__adImage retain_stub] autorelease_stub];
}

- (void) setAdImage: (NSString *) adImage {
  [adImage retain_stub];
  [__adImage release_stub];
  __adImage = adImage;
  __adImage_isset = YES;
}

- (BOOL) adImageIsSet {
  return __adImage_isset;
}

- (void) unsetAdImage {
  [__adImage release_stub];
  __adImage = nil;
  __adImage_isset = NO;
}

- (NSString *) adLink {
  return [[__adLink retain_stub] autorelease_stub];
}

- (void) setAdLink: (NSString *) adLink {
  [adLink retain_stub];
  [__adLink release_stub];
  __adLink = adLink;
  __adLink_isset = YES;
}

- (BOOL) adLinkIsSet {
  return __adLink_isset;
}

- (void) unsetAdLink {
  [__adLink release_stub];
  __adLink = nil;
  __adLink_isset = NO;
}

- (NSString *) adContent {
  return [[__adContent retain_stub] autorelease_stub];
}

- (void) setAdContent: (NSString *) adContent {
  [adContent retain_stub];
  [__adContent release_stub];
  __adContent = adContent;
  __adContent_isset = YES;
}

- (BOOL) adContentIsSet {
  return __adContent_isset;
}

- (void) unsetAdContent {
  [__adContent release_stub];
  __adContent = nil;
  __adContent_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReturnCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAdLocation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIpSingleNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIpMuchNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOnlineStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAuditStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdImage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdLink: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAdContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAdvertisementShowOutput"];
  if (__returnCode_isset) {
    [outProtocol writeFieldBeginWithName: @"returnCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __returnCode];
    [outProtocol writeFieldEnd];
  }
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__adTitle_isset) {
    if (__adTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"adTitle" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __adTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adDescription_isset) {
    if (__adDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"adDescription" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __adDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __createTime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adLocation_isset) {
    [outProtocol writeFieldBeginWithName: @"adLocation" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __adLocation];
    [outProtocol writeFieldEnd];
  }
  if (__ipSingleNum_isset) {
    [outProtocol writeFieldBeginWithName: @"ipSingleNum" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __ipSingleNum];
    [outProtocol writeFieldEnd];
  }
  if (__ipMuchNum_isset) {
    [outProtocol writeFieldBeginWithName: @"ipMuchNum" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __ipMuchNum];
    [outProtocol writeFieldEnd];
  }
  if (__onlineStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"onlineStatus" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __onlineStatus];
    [outProtocol writeFieldEnd];
  }
  if (__auditStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"auditStatus" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __auditStatus];
    [outProtocol writeFieldEnd];
  }
  if (__adImage_isset) {
    if (__adImage != nil) {
      [outProtocol writeFieldBeginWithName: @"adImage" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __adImage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adLink_isset) {
    if (__adLink != nil) {
      [outProtocol writeFieldBeginWithName: @"adLink" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __adLink];
      [outProtocol writeFieldEnd];
    }
  }
  if (__adContent_isset) {
    if (__adContent != nil) {
      [outProtocol writeFieldBeginWithName: @"adContent" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __adContent];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAdvertisementShowOutput("];
  [ms appendString: @"returnCode:"];
  [ms appendFormat: @"%i", __returnCode];
  [ms appendString: @",id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",adTitle:"];
  [ms appendFormat: @"\"%@\"", __adTitle];
  [ms appendString: @",adDescription:"];
  [ms appendFormat: @"\"%@\"", __adDescription];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"\"%@\"", __createTime];
  [ms appendString: @",adLocation:"];
  [ms appendFormat: @"%i", __adLocation];
  [ms appendString: @",ipSingleNum:"];
  [ms appendFormat: @"%i", __ipSingleNum];
  [ms appendString: @",ipMuchNum:"];
  [ms appendFormat: @"%i", __ipMuchNum];
  [ms appendString: @",onlineStatus:"];
  [ms appendFormat: @"%i", __onlineStatus];
  [ms appendString: @",auditStatus:"];
  [ms appendFormat: @"%i", __auditStatus];
  [ms appendString: @",adImage:"];
  [ms appendFormat: @"\"%@\"", __adImage];
  [ms appendString: @",adLink:"];
  [ms appendFormat: @"\"%@\"", __adLink];
  [ms appendString: @",adContent:"];
  [ms appendFormat: @"\"%@\"", __adContent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation AdvertisementConstants
+ (void) initialize {
}
@end

@interface getAdvertisementInfo_args : NSObject <TBase, NSCoding> {
  GetAdvertisementInput * __input;

  BOOL __input_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=input, setter=setInput:) GetAdvertisementInput * input;
#endif

- (id) init;
- (id) initWithInput: (GetAdvertisementInput *) input;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetAdvertisementInput *) input;
- (void) setInput: (GetAdvertisementInput *) input;
#endif
- (BOOL) inputIsSet;

@end

@implementation getAdvertisementInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithInput: (GetAdvertisementInput *) input
{
  self = [super init];
  __input = [input retain_stub];
  __input_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"input"])
  {
    __input = [[decoder decodeObjectForKey: @"input"] retain_stub];
    __input_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__input_isset)
  {
    [encoder encodeObject: __input forKey: @"input"];
  }
}

- (void) dealloc
{
  [__input release_stub];
  [super dealloc_stub];
}

- (GetAdvertisementInput *) input {
  return [[__input retain_stub] autorelease_stub];
}

- (void) setInput: (GetAdvertisementInput *) input {
  [input retain_stub];
  [__input release_stub];
  __input = input;
  __input_isset = YES;
}

- (BOOL) inputIsSet {
  return __input_isset;
}

- (void) unsetInput {
  [__input release_stub];
  __input = nil;
  __input_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetAdvertisementInput *fieldValue = [[GetAdvertisementInput alloc] init];
          [fieldValue read: inProtocol];
          [self setInput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getAdvertisementInfo_args"];
  if (__input_isset) {
    if (__input != nil) {
      [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
      [__input write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getAdvertisementInfo_args("];
  [ms appendString: @"input:"];
  [ms appendFormat: @"%@", __input];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetAdvertisementInfo_result : NSObject <TBase, NSCoding> {
  GetAdvertisementOutput * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetAdvertisementOutput * success;
#endif

- (id) init;
- (id) initWithSuccess: (GetAdvertisementOutput *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetAdvertisementOutput *) success;
- (void) setSuccess: (GetAdvertisementOutput *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdvertisementInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetAdvertisementOutput *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (GetAdvertisementOutput *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetAdvertisementOutput *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetAdvertisementOutput *fieldValue = [[GetAdvertisementOutput alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAdvertisementInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAdvertisementInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AdvertisementServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getAdvertisementInfo: (GetAdvertisementInput *) input
{
  [outProtocol writeMessageBeginWithName: @"getAdvertisementInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getAdvertisementInfo_args"];
  if (input != nil)  {
    [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
    [input write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetAdvertisementOutput *) recv_getAdvertisementInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetAdvertisementInfo_result * result = [[[GetAdvertisementInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getAdvertisementInfo failed: unknown result"];
}

- (GetAdvertisementOutput *) getAdvertisementInfo: (GetAdvertisementInput *) input
{
  [self send_getAdvertisementInfo : input];
  return [self recv_getAdvertisementInfo];
}

@end

@implementation AdvertisementServiceProcessor

- (id) initWithAdvertisementService: (id <AdvertisementService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getAdvertisementInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getAdvertisementInfo"];
  }
  return self;
}

- (id<AdvertisementService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdvertisementInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getAdvertisementInfo_args * args = [[getAdvertisementInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetAdvertisementInfo_result * result = [[GetAdvertisementInfo_result alloc] init];
  [result setSuccess: [mService getAdvertisementInfo: [args input]]];
  [outProtocol writeMessageBeginWithName: @"getAdvertisementInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

