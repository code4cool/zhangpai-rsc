/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "CommonService.h"

@implementation ServiceMainInput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServiceName: (NSString *) serviceName methodName: (NSString *) methodName secretArgs: (NSString *) secretArgs jsonArgs: (NSString *) jsonArgs
{
  self = [super init];
  __serviceName = [serviceName retain_stub];
  __serviceName_isset = YES;
  __methodName = [methodName retain_stub];
  __methodName_isset = YES;
  __secretArgs = [secretArgs retain_stub];
  __secretArgs_isset = YES;
  __jsonArgs = [jsonArgs retain_stub];
  __jsonArgs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceName"])
  {
    __serviceName = [[decoder decodeObjectForKey: @"serviceName"] retain_stub];
    __serviceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"methodName"])
  {
    __methodName = [[decoder decodeObjectForKey: @"methodName"] retain_stub];
    __methodName_isset = YES;
  }
  if ([decoder containsValueForKey: @"secretArgs"])
  {
    __secretArgs = [[decoder decodeObjectForKey: @"secretArgs"] retain_stub];
    __secretArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"jsonArgs"])
  {
    __jsonArgs = [[decoder decodeObjectForKey: @"jsonArgs"] retain_stub];
    __jsonArgs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceName_isset)
  {
    [encoder encodeObject: __serviceName forKey: @"serviceName"];
  }
  if (__methodName_isset)
  {
    [encoder encodeObject: __methodName forKey: @"methodName"];
  }
  if (__secretArgs_isset)
  {
    [encoder encodeObject: __secretArgs forKey: @"secretArgs"];
  }
  if (__jsonArgs_isset)
  {
    [encoder encodeObject: __jsonArgs forKey: @"jsonArgs"];
  }
}

- (void) dealloc
{
  [__serviceName release_stub];
  [__methodName release_stub];
  [__secretArgs release_stub];
  [__jsonArgs release_stub];
  [super dealloc_stub];
}

- (NSString *) serviceName {
  return [[__serviceName retain_stub] autorelease_stub];
}

- (void) setServiceName: (NSString *) serviceName {
  [serviceName retain_stub];
  [__serviceName release_stub];
  __serviceName = serviceName;
  __serviceName_isset = YES;
}

- (BOOL) serviceNameIsSet {
  return __serviceName_isset;
}

- (void) unsetServiceName {
  [__serviceName release_stub];
  __serviceName = nil;
  __serviceName_isset = NO;
}

- (NSString *) methodName {
  return [[__methodName retain_stub] autorelease_stub];
}

- (void) setMethodName: (NSString *) methodName {
  [methodName retain_stub];
  [__methodName release_stub];
  __methodName = methodName;
  __methodName_isset = YES;
}

- (BOOL) methodNameIsSet {
  return __methodName_isset;
}

- (void) unsetMethodName {
  [__methodName release_stub];
  __methodName = nil;
  __methodName_isset = NO;
}

- (NSString *) secretArgs {
  return [[__secretArgs retain_stub] autorelease_stub];
}

- (void) setSecretArgs: (NSString *) secretArgs {
  [secretArgs retain_stub];
  [__secretArgs release_stub];
  __secretArgs = secretArgs;
  __secretArgs_isset = YES;
}

- (BOOL) secretArgsIsSet {
  return __secretArgs_isset;
}

- (void) unsetSecretArgs {
  [__secretArgs release_stub];
  __secretArgs = nil;
  __secretArgs_isset = NO;
}

- (NSString *) jsonArgs {
  return [[__jsonArgs retain_stub] autorelease_stub];
}

- (void) setJsonArgs: (NSString *) jsonArgs {
  [jsonArgs retain_stub];
  [__jsonArgs release_stub];
  __jsonArgs = jsonArgs;
  __jsonArgs_isset = YES;
}

- (BOOL) jsonArgsIsSet {
  return __jsonArgs_isset;
}

- (void) unsetJsonArgs {
  [__jsonArgs release_stub];
  __jsonArgs = nil;
  __jsonArgs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMethodName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSecretArgs: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setJsonArgs: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServiceMainInput"];
  if (__serviceName_isset) {
    if (__serviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __serviceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__methodName_isset) {
    if (__methodName != nil) {
      [outProtocol writeFieldBeginWithName: @"methodName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __methodName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__secretArgs_isset) {
    if (__secretArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"secretArgs" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __secretArgs];
      [outProtocol writeFieldEnd];
    }
  }
  if (__jsonArgs_isset) {
    if (__jsonArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"jsonArgs" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __jsonArgs];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServiceMainInput("];
  [ms appendString: @"serviceName:"];
  [ms appendFormat: @"\"%@\"", __serviceName];
  [ms appendString: @",methodName:"];
  [ms appendFormat: @"\"%@\"", __methodName];
  [ms appendString: @",secretArgs:"];
  [ms appendFormat: @"\"%@\"", __secretArgs];
  [ms appendString: @",jsonArgs:"];
  [ms appendFormat: @"\"%@\"", __jsonArgs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation CommonServiceConstants
+ (void) initialize {
}
@end

@interface serviceMain_args : NSObject <TBase, NSCoding> {
  ServiceMainInput * __input;

  BOOL __input_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=input, setter=setInput:) ServiceMainInput * input;
#endif

- (id) init;
- (id) initWithInput: (ServiceMainInput *) input;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ServiceMainInput *) input;
- (void) setInput: (ServiceMainInput *) input;
#endif
- (BOOL) inputIsSet;

@end

@implementation serviceMain_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithInput: (ServiceMainInput *) input
{
  self = [super init];
  __input = [input retain_stub];
  __input_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"input"])
  {
    __input = [[decoder decodeObjectForKey: @"input"] retain_stub];
    __input_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__input_isset)
  {
    [encoder encodeObject: __input forKey: @"input"];
  }
}

- (void) dealloc
{
  [__input release_stub];
  [super dealloc_stub];
}

- (ServiceMainInput *) input {
  return [[__input retain_stub] autorelease_stub];
}

- (void) setInput: (ServiceMainInput *) input {
  [input retain_stub];
  [__input release_stub];
  __input = input;
  __input_isset = YES;
}

- (BOOL) inputIsSet {
  return __input_isset;
}

- (void) unsetInput {
  [__input release_stub];
  __input = nil;
  __input_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceMainInput *fieldValue = [[ServiceMainInput alloc] init];
          [fieldValue read: inProtocol];
          [self setInput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"serviceMain_args"];
  if (__input_isset) {
    if (__input != nil) {
      [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
      [__input write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"serviceMain_args("];
  [ms appendString: @"input:"];
  [ms appendFormat: @"%@", __input];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ServiceMain_result : NSObject <TBase, NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ServiceMain_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServiceMain_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServiceMain_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CommonServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_serviceMain: (ServiceMainInput *) input
{
  [outProtocol writeMessageBeginWithName: @"serviceMain" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"serviceMain_args"];
  if (input != nil)  {
    [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
    [input write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_serviceMain
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ServiceMain_result * result = [[[ServiceMain_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"serviceMain failed: unknown result"];
}

- (NSString *) serviceMain: (ServiceMainInput *) input
{
  [self send_serviceMain : input];
  return [self recv_serviceMain];
}

@end

@implementation CommonServiceProcessor

- (id) initWithCommonService: (id <CommonService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_serviceMain_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"serviceMain"];
  }
  return self;
}

- (id<CommonService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_serviceMain_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  serviceMain_args * args = [[serviceMain_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ServiceMain_result * result = [[ServiceMain_result alloc] init];
  [result setSuccess: [mService serviceMain: [args input]]];
  [outProtocol writeMessageBeginWithName: @"serviceMain"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

