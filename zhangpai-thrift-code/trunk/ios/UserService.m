/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "UserService.h"

@implementation LoginInput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserName: (NSString *) userName password: (NSString *) password version: (NSString *) version
{
  self = [super init];
  __userName = [userName retain_stub];
  __userName_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __version = [version retain_stub];
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain_stub];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [[decoder decodeObjectForKey: @"version"] retain_stub];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__version_isset)
  {
    [encoder encodeObject: __version forKey: @"version"];
  }
}

- (void) dealloc
{
  [__userName release_stub];
  [__password release_stub];
  [__version release_stub];
  [super dealloc_stub];
}

- (NSString *) userName {
  return [[__userName retain_stub] autorelease_stub];
}

- (void) setUserName: (NSString *) userName {
  [userName retain_stub];
  [__userName release_stub];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release_stub];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) version {
  return [[__version retain_stub] autorelease_stub];
}

- (void) setVersion: (NSString *) version {
  [version retain_stub];
  [__version release_stub];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release_stub];
  __version = nil;
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginInput"];
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginInput("];
  [ms appendString: @"userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginOutput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (int32_t) userId shardId: (int32_t) shardId userName: (NSString *) userName email: (NSString *) email mobile: (NSString *) mobile cardHolderName: (NSString *) cardHolderName idNumber: (NSString *) idNumber password: (NSString *) password gender: (int32_t) gender userType: (int32_t) userType status: (int32_t) status returnCode: (int32_t) returnCode
{
  self = [super init];
  __userId = userId;
  __userId_isset = YES;
  __shardId = shardId;
  __shardId_isset = YES;
  __userName = [userName retain_stub];
  __userName_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  __cardHolderName = [cardHolderName retain_stub];
  __cardHolderName_isset = YES;
  __idNumber = [idNumber retain_stub];
  __idNumber_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __userType = userType;
  __userType_isset = YES;
  __status = status;
  __status_isset = YES;
  __returnCode = returnCode;
  __returnCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [decoder decodeInt32ForKey: @"userId"];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"shardId"])
  {
    __shardId = [decoder decodeInt32ForKey: @"shardId"];
    __shardId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain_stub];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardHolderName"])
  {
    __cardHolderName = [[decoder decodeObjectForKey: @"cardHolderName"] retain_stub];
    __cardHolderName_isset = YES;
  }
  if ([decoder containsValueForKey: @"idNumber"])
  {
    __idNumber = [[decoder decodeObjectForKey: @"idNumber"] retain_stub];
    __idNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"userType"])
  {
    __userType = [decoder decodeInt32ForKey: @"userType"];
    __userType_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"returnCode"])
  {
    __returnCode = [decoder decodeInt32ForKey: @"returnCode"];
    __returnCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeInt32: __userId forKey: @"userId"];
  }
  if (__shardId_isset)
  {
    [encoder encodeInt32: __shardId forKey: @"shardId"];
  }
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
  if (__cardHolderName_isset)
  {
    [encoder encodeObject: __cardHolderName forKey: @"cardHolderName"];
  }
  if (__idNumber_isset)
  {
    [encoder encodeObject: __idNumber forKey: @"idNumber"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__userType_isset)
  {
    [encoder encodeInt32: __userType forKey: @"userType"];
  }
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__returnCode_isset)
  {
    [encoder encodeInt32: __returnCode forKey: @"returnCode"];
  }
}

- (void) dealloc
{
  [__userName release_stub];
  [__email release_stub];
  [__mobile release_stub];
  [__cardHolderName release_stub];
  [__idNumber release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (int32_t) userId {
  return __userId;
}

- (void) setUserId: (int32_t) userId {
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  __userId_isset = NO;
}

- (int32_t) shardId {
  return __shardId;
}

- (void) setShardId: (int32_t) shardId {
  __shardId = shardId;
  __shardId_isset = YES;
}

- (BOOL) shardIdIsSet {
  return __shardId_isset;
}

- (void) unsetShardId {
  __shardId_isset = NO;
}

- (NSString *) userName {
  return [[__userName retain_stub] autorelease_stub];
}

- (void) setUserName: (NSString *) userName {
  [userName retain_stub];
  [__userName release_stub];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release_stub];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (NSString *) cardHolderName {
  return [[__cardHolderName retain_stub] autorelease_stub];
}

- (void) setCardHolderName: (NSString *) cardHolderName {
  [cardHolderName retain_stub];
  [__cardHolderName release_stub];
  __cardHolderName = cardHolderName;
  __cardHolderName_isset = YES;
}

- (BOOL) cardHolderNameIsSet {
  return __cardHolderName_isset;
}

- (void) unsetCardHolderName {
  [__cardHolderName release_stub];
  __cardHolderName = nil;
  __cardHolderName_isset = NO;
}

- (NSString *) idNumber {
  return [[__idNumber retain_stub] autorelease_stub];
}

- (void) setIdNumber: (NSString *) idNumber {
  [idNumber retain_stub];
  [__idNumber release_stub];
  __idNumber = idNumber;
  __idNumber_isset = YES;
}

- (BOOL) idNumberIsSet {
  return __idNumber_isset;
}

- (void) unsetIdNumber {
  [__idNumber release_stub];
  __idNumber = nil;
  __idNumber_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (int32_t) userType {
  return __userType;
}

- (void) setUserType: (int32_t) userType {
  __userType = userType;
  __userType_isset = YES;
}

- (BOOL) userTypeIsSet {
  return __userType_isset;
}

- (void) unsetUserType {
  __userType_isset = NO;
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (int32_t) returnCode {
  return __returnCode;
}

- (void) setReturnCode: (int32_t) returnCode {
  __returnCode = returnCode;
  __returnCode_isset = YES;
}

- (BOOL) returnCodeIsSet {
  return __returnCode_isset;
}

- (void) unsetReturnCode {
  __returnCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setShardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardHolderName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIdNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReturnCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginOutput"];
  if (__userId_isset) {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __userId];
    [outProtocol writeFieldEnd];
  }
  if (__shardId_isset) {
    [outProtocol writeFieldBeginWithName: @"shardId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __shardId];
    [outProtocol writeFieldEnd];
  }
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardHolderName_isset) {
    if (__cardHolderName != nil) {
      [outProtocol writeFieldBeginWithName: @"cardHolderName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __cardHolderName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__idNumber_isset) {
    if (__idNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"idNumber" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __idNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__userType_isset) {
    [outProtocol writeFieldBeginWithName: @"userType" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __userType];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__returnCode_isset) {
    [outProtocol writeFieldBeginWithName: @"returnCode" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __returnCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginOutput("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%i", __userId];
  [ms appendString: @",shardId:"];
  [ms appendFormat: @"%i", __shardId];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @",cardHolderName:"];
  [ms appendFormat: @"\"%@\"", __cardHolderName];
  [ms appendString: @",idNumber:"];
  [ms appendFormat: @"\"%@\"", __idNumber];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",userType:"];
  [ms appendFormat: @"%i", __userType];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",returnCode:"];
  [ms appendFormat: @"%i", __returnCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetUserInput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (int32_t) userId version: (NSString *) version
{
  self = [super init];
  __userId = userId;
  __userId_isset = YES;
  __version = [version retain_stub];
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [decoder decodeInt32ForKey: @"userId"];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [[decoder decodeObjectForKey: @"version"] retain_stub];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeInt32: __userId forKey: @"userId"];
  }
  if (__version_isset)
  {
    [encoder encodeObject: __version forKey: @"version"];
  }
}

- (void) dealloc
{
  [__version release_stub];
  [super dealloc_stub];
}

- (int32_t) userId {
  return __userId;
}

- (void) setUserId: (int32_t) userId {
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  __userId_isset = NO;
}

- (NSString *) version {
  return [[__version retain_stub] autorelease_stub];
}

- (void) setVersion: (NSString *) version {
  [version retain_stub];
  [__version release_stub];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release_stub];
  __version = nil;
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInput"];
  if (__userId_isset) {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __userId];
    [outProtocol writeFieldEnd];
  }
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserInput("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%i", __userId];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetUserOutput

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (int32_t) userId shardId: (int32_t) shardId userName: (NSString *) userName email: (NSString *) email mobile: (NSString *) mobile cardHolderName: (NSString *) cardHolderName idNumber: (NSString *) idNumber password: (NSString *) password gender: (int32_t) gender userType: (int32_t) userType status: (int32_t) status returnCode: (int32_t) returnCode
{
  self = [super init];
  __userId = userId;
  __userId_isset = YES;
  __shardId = shardId;
  __shardId_isset = YES;
  __userName = [userName retain_stub];
  __userName_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  __cardHolderName = [cardHolderName retain_stub];
  __cardHolderName_isset = YES;
  __idNumber = [idNumber retain_stub];
  __idNumber_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __userType = userType;
  __userType_isset = YES;
  __status = status;
  __status_isset = YES;
  __returnCode = returnCode;
  __returnCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [decoder decodeInt32ForKey: @"userId"];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"shardId"])
  {
    __shardId = [decoder decodeInt32ForKey: @"shardId"];
    __shardId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain_stub];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardHolderName"])
  {
    __cardHolderName = [[decoder decodeObjectForKey: @"cardHolderName"] retain_stub];
    __cardHolderName_isset = YES;
  }
  if ([decoder containsValueForKey: @"idNumber"])
  {
    __idNumber = [[decoder decodeObjectForKey: @"idNumber"] retain_stub];
    __idNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"userType"])
  {
    __userType = [decoder decodeInt32ForKey: @"userType"];
    __userType_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"returnCode"])
  {
    __returnCode = [decoder decodeInt32ForKey: @"returnCode"];
    __returnCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeInt32: __userId forKey: @"userId"];
  }
  if (__shardId_isset)
  {
    [encoder encodeInt32: __shardId forKey: @"shardId"];
  }
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
  if (__cardHolderName_isset)
  {
    [encoder encodeObject: __cardHolderName forKey: @"cardHolderName"];
  }
  if (__idNumber_isset)
  {
    [encoder encodeObject: __idNumber forKey: @"idNumber"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__userType_isset)
  {
    [encoder encodeInt32: __userType forKey: @"userType"];
  }
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__returnCode_isset)
  {
    [encoder encodeInt32: __returnCode forKey: @"returnCode"];
  }
}

- (void) dealloc
{
  [__userName release_stub];
  [__email release_stub];
  [__mobile release_stub];
  [__cardHolderName release_stub];
  [__idNumber release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (int32_t) userId {
  return __userId;
}

- (void) setUserId: (int32_t) userId {
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  __userId_isset = NO;
}

- (int32_t) shardId {
  return __shardId;
}

- (void) setShardId: (int32_t) shardId {
  __shardId = shardId;
  __shardId_isset = YES;
}

- (BOOL) shardIdIsSet {
  return __shardId_isset;
}

- (void) unsetShardId {
  __shardId_isset = NO;
}

- (NSString *) userName {
  return [[__userName retain_stub] autorelease_stub];
}

- (void) setUserName: (NSString *) userName {
  [userName retain_stub];
  [__userName release_stub];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release_stub];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (NSString *) cardHolderName {
  return [[__cardHolderName retain_stub] autorelease_stub];
}

- (void) setCardHolderName: (NSString *) cardHolderName {
  [cardHolderName retain_stub];
  [__cardHolderName release_stub];
  __cardHolderName = cardHolderName;
  __cardHolderName_isset = YES;
}

- (BOOL) cardHolderNameIsSet {
  return __cardHolderName_isset;
}

- (void) unsetCardHolderName {
  [__cardHolderName release_stub];
  __cardHolderName = nil;
  __cardHolderName_isset = NO;
}

- (NSString *) idNumber {
  return [[__idNumber retain_stub] autorelease_stub];
}

- (void) setIdNumber: (NSString *) idNumber {
  [idNumber retain_stub];
  [__idNumber release_stub];
  __idNumber = idNumber;
  __idNumber_isset = YES;
}

- (BOOL) idNumberIsSet {
  return __idNumber_isset;
}

- (void) unsetIdNumber {
  [__idNumber release_stub];
  __idNumber = nil;
  __idNumber_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (int32_t) userType {
  return __userType;
}

- (void) setUserType: (int32_t) userType {
  __userType = userType;
  __userType_isset = YES;
}

- (BOOL) userTypeIsSet {
  return __userType_isset;
}

- (void) unsetUserType {
  __userType_isset = NO;
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (int32_t) returnCode {
  return __returnCode;
}

- (void) setReturnCode: (int32_t) returnCode {
  __returnCode = returnCode;
  __returnCode_isset = YES;
}

- (BOOL) returnCodeIsSet {
  return __returnCode_isset;
}

- (void) unsetReturnCode {
  __returnCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setShardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardHolderName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIdNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReturnCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserOutput"];
  if (__userId_isset) {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __userId];
    [outProtocol writeFieldEnd];
  }
  if (__shardId_isset) {
    [outProtocol writeFieldBeginWithName: @"shardId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __shardId];
    [outProtocol writeFieldEnd];
  }
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cardHolderName_isset) {
    if (__cardHolderName != nil) {
      [outProtocol writeFieldBeginWithName: @"cardHolderName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __cardHolderName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__idNumber_isset) {
    if (__idNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"idNumber" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __idNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__userType_isset) {
    [outProtocol writeFieldBeginWithName: @"userType" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __userType];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__returnCode_isset) {
    [outProtocol writeFieldBeginWithName: @"returnCode" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __returnCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserOutput("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%i", __userId];
  [ms appendString: @",shardId:"];
  [ms appendFormat: @"%i", __shardId];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @",cardHolderName:"];
  [ms appendFormat: @"\"%@\"", __cardHolderName];
  [ms appendString: @",idNumber:"];
  [ms appendFormat: @"\"%@\"", __idNumber];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",userType:"];
  [ms appendFormat: @"%i", __userType];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",returnCode:"];
  [ms appendFormat: @"%i", __returnCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation UserServiceConstants
+ (void) initialize {
}
@end

@interface login_args : NSObject <TBase, NSCoding> {
  LoginInput * __input;

  BOOL __input_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=input, setter=setInput:) LoginInput * input;
#endif

- (id) init;
- (id) initWithInput: (LoginInput *) input;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginInput *) input;
- (void) setInput: (LoginInput *) input;
#endif
- (BOOL) inputIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithInput: (LoginInput *) input
{
  self = [super init];
  __input = [input retain_stub];
  __input_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"input"])
  {
    __input = [[decoder decodeObjectForKey: @"input"] retain_stub];
    __input_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__input_isset)
  {
    [encoder encodeObject: __input forKey: @"input"];
  }
}

- (void) dealloc
{
  [__input release_stub];
  [super dealloc_stub];
}

- (LoginInput *) input {
  return [[__input retain_stub] autorelease_stub];
}

- (void) setInput: (LoginInput *) input {
  [input retain_stub];
  [__input release_stub];
  __input = input;
  __input_isset = YES;
}

- (BOOL) inputIsSet {
  return __input_isset;
}

- (void) unsetInput {
  [__input release_stub];
  __input = nil;
  __input_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          LoginInput *fieldValue = [[LoginInput alloc] init];
          [fieldValue read: inProtocol];
          [self setInput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__input_isset) {
    if (__input != nil) {
      [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
      [__input write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"input:"];
  [ms appendFormat: @"%@", __input];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <TBase, NSCoding> {
  LoginOutput * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginOutput * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginOutput *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginOutput *) success;
- (void) setSuccess: (LoginOutput *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginOutput *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginOutput *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginOutput *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginOutput *fieldValue = [[LoginOutput alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getUser_args : NSObject <TBase, NSCoding> {
  GetUserInput * __input;

  BOOL __input_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=input, setter=setInput:) GetUserInput * input;
#endif

- (id) init;
- (id) initWithInput: (GetUserInput *) input;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetUserInput *) input;
- (void) setInput: (GetUserInput *) input;
#endif
- (BOOL) inputIsSet;

@end

@implementation getUser_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithInput: (GetUserInput *) input
{
  self = [super init];
  __input = [input retain_stub];
  __input_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"input"])
  {
    __input = [[decoder decodeObjectForKey: @"input"] retain_stub];
    __input_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__input_isset)
  {
    [encoder encodeObject: __input forKey: @"input"];
  }
}

- (void) dealloc
{
  [__input release_stub];
  [super dealloc_stub];
}

- (GetUserInput *) input {
  return [[__input retain_stub] autorelease_stub];
}

- (void) setInput: (GetUserInput *) input {
  [input retain_stub];
  [__input release_stub];
  __input = input;
  __input_isset = YES;
}

- (BOOL) inputIsSet {
  return __input_isset;
}

- (void) unsetInput {
  [__input release_stub];
  __input = nil;
  __input_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetUserInput *fieldValue = [[GetUserInput alloc] init];
          [fieldValue read: inProtocol];
          [self setInput: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUser_args"];
  if (__input_isset) {
    if (__input != nil) {
      [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
      [__input write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getUser_args("];
  [ms appendString: @"input:"];
  [ms appendFormat: @"%@", __input];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetUser_result : NSObject <TBase, NSCoding> {
  GetUserOutput * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetUserOutput * success;
#endif

- (id) init;
- (id) initWithSuccess: (GetUserOutput *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetUserOutput *) success;
- (void) setSuccess: (GetUserOutput *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetUser_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetUserOutput *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (GetUserOutput *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetUserOutput *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetUserOutput *fieldValue = [[GetUserOutput alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUser_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUser_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_login: (LoginInput *) input
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (input != nil)  {
    [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
    [input write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginOutput *) recv_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (LoginOutput *) login: (LoginInput *) input
{
  [self send_login : input];
  return [self recv_login];
}

- (void) send_getUser: (GetUserInput *) input
{
  [outProtocol writeMessageBeginWithName: @"getUser" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUser_args"];
  if (input != nil)  {
    [outProtocol writeFieldBeginWithName: @"input" type: TType_STRUCT fieldID: 1];
    [input write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetUserOutput *) recv_getUser
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetUser_result * result = [[[GetUser_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUser failed: unknown result"];
}

- (GetUserOutput *) getUser: (GetUserInput *) input
{
  [self send_getUser : input];
  return [self recv_getUser];
}

@end

@implementation UserServiceProcessor

- (id) initWithUserService: (id <UserService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login"];
  }
  {
    SEL s = @selector(process_getUser_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getUser"];
  }
  return self;
}

- (id<UserService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_args * args = [[login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_result * result = [[Login_result alloc] init];
  [result setSuccess: [mService login: [args input]]];
  [outProtocol writeMessageBeginWithName: @"login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getUser_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getUser_args * args = [[getUser_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetUser_result * result = [[GetUser_result alloc] init];
  [result setSuccess: [mService getUser: [args input]]];
  [outProtocol writeMessageBeginWithName: @"getUser"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

